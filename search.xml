<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>有关 PHP 和 js 浮点运算的坑</title>
      <link href="/uncategorized/you-guan-php-he-js-fu-dian-yun-suan-de-keng/"/>
      <url>/uncategorized/you-guan-php-he-js-fu-dian-yun-suan-de-keng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文文章参考于网络</p></blockquote><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><blockquote><p>0.1 + 0.2 为啥不等于 0.3 ? （正确结果：0.30000000000000004）</p></blockquote><blockquote><p>0.8 * 7 为啥不等于 5.6 ? （正确结果：5.6000000000000005）</p></blockquote><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token number">0.58</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//为啥输出57</span><span class="token delimiter">?></span></code></pre><p>正确结果是 57，而不是 58</p><p>为啥输出是57啊? PHP的bug么?</p><p>我相信有很多的同学有过这样的疑问, 因为光问我类似问题的人就很多, 更不用说bugs.php.net上经常有人问…</p><h3 id="IEEE-754"><a href="#IEEE-754" class="headerlink" title="IEEE 754"></a>IEEE 754</h3><p>要搞明白这个原因, 首先我们要知道浮点数的表示(IEEE 754):</p><ul><li><p>浮点数, 以64位的长度(双精度)为例, 会采用1位符号位(E), 11指数位(Q), 52位尾数(M)表示(一共64位).</p></li><li><p>符号位：最高位表示数据的正负，0表示正数，1表示负数。</p></li><li><p>指数位：表示数据以2为底的幂，指数采用偏移码表示</p></li><li><p>尾数：表示数据小数点后的有效数字.</p></li></ul><p>这里的关键点就在于, 小数在二进制的表示, 关于小数如何用二进制表示, 大家可以百度一下, 我这里就不再赘述, 我们关键的要了解,<br>0.58 对于二进制表示来说, 是无限长的值(下面的数字省掉了隐含的1)..</p><pre><code>0.58的二进制表示基本上(52位)是: 00101000111101011100001010001111010111000010100011110.57的二进制表示基本上(52位)是: 0010001111010111000010100011110101110000101000111101</code></pre><p>而两者的二进制, 如果只是通过这52位计算的话,分别是:</p><pre><code>0.58 -&gt; 0.579999999999999960.57 -&gt; 0.56999999999999995</code></pre><p>至于0.58 * 100的具体浮点数乘法, 我们不考虑那么细, 有兴趣的可以看(Floating point), 我们就模糊的以心算来看… 0.58 * 100 = 57.999999999</p><p>那你intval一下, 自然就是57了….</p><p>可见, 这个问题的关键点就是: “你看似有穷的小数, 在计算机的二进制表示里却是无穷的”</p><p>so, 不要再以为这是PHP的bug了, 这就是这样的…..</p><h3 id="浮点运算惹的祸"><a href="#浮点运算惹的祸" class="headerlink" title="浮点运算惹的祸"></a>浮点运算惹的祸</h3><p>其实这些结果都并非语言的 bug，但和语言的实现原理有关， js 所有数字统一为 Number, 包括整形实际上全都是双精度（double）类型。</p><p>而PHP会区分 int 还是 float。不管什么语言，只要涉及浮点运算，都是存在类似的问题，使用时一定要注意。</p><h3 id="浮点二进制原理"><a href="#浮点二进制原理" class="headerlink" title="浮点二进制原理"></a>浮点二进制原理</h3><p>根据国际标准IEEE 754，任意一个二进制浮点数V可以表示成下面的形式：</p><blockquote><p>V = (-1)s * M * E</p><ul><li>(-1)s 表示符号位，当s=0，V为正数；当s=1，V为负数。</li><li>M表示有效数字，大于等于1，小于2。</li><li>2E 表示指数位。</li></ul></blockquote><p>举例来说：十进制的-5.0，写成二进制是-101.0，相当于-1.01×22 。那么，s=1，M=1.01，E=2。<br>IEEE 754规定，对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。</p><p>对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。</p><p>IEEE 754对有效数字M和指数E，还有一些特别规定。</p><p>前面说过，1≤M&lt;2，也就是说，M可以写成1.xxxxxx的形式，其中xxxxxx表示小数部分。IEEE 754规定，在计算机 内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面的xxxxxx部分。比如保存1.01的时候，只 保存01，等到读取的时候，再把第一位的1加上去。这样做的目的，是节省1位有效数字。以32位浮点数为例，留给 M只有23位，将第一位的1舍去以后，等于可以保存24位有效数字。</p><p>至于指数E，情况就比较复杂。</p><p>首先，E为一个无符号整数（unsigned int）。这意味着，如果E为8位，它的取值范围为0~255；如果E为11位，它 的取值范围为0~2047。但是，我们知道，科学计数法中的E是可以出现负数的，所以IEEE 754规定，E的真实值必须 由E再减去一个中间数，对于8位的E，这个中间数是127；对于11位的E，这个中间数是1023。<br>比如，210 的E是10，所以保存成32位浮点数时，必须保存成10(E的真实值)+127=137(E)，即10001001。</p><p>然后，指数E还可以再分成三种情况：</p><blockquote><ul><li>E不全为0或不全为1。这时，浮点数就采用上面的规则表示，即指数E的计算值减去127（或1023），得到真实 值，再将有效数字M前加上第一位的1。</li><li>E全为0。这时，浮点数的指数E等于1-127（或者1-1023），有效数字M不再加上第一位的1，而是还原为 0.xxxxxx的小数。这样做是为了表示±0，以及接近于0的很小的数字。</li><li>E全为1。这时，如果有效数字M全为0，表示±无穷大（正负取决于符号位s）；如果有效数字M不全为0，表示 这个数不是一个数（NaN）。&gt;</li></ul></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.laruence.com/2013/03/26/2884.html" target="_blank" rel="noopener">http://www.laruence.com/2013/03/26/2884.html</a></li><li><a href="http://www.laruence.com/2011/12/19/2399.html" target="_blank" rel="noopener">http://www.laruence.com/2011/12/19/2399.html</a></li><li><a href="http://www.cnblogs.com/qlwy/archive/2012/08/17/2644470.html" target="_blank" rel="noopener">http://www.cnblogs.com/qlwy/archive/2012/08/17/2644470.html</a>    </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API 设计规范</title>
      <link href="/laravel/restful-api-she-ji-gui-fan/"/>
      <url>/laravel/restful-api-she-ji-gui-fan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是为 <a href="http://cq.qq.com" target="_blank" rel="noopener">大渝网</a> <code>API</code> 开发规范拟定的一个 <code>beta</code> 版，文章大量参考了目前比较常见的 <code>RESTful API</code> 设计。</p></blockquote><p>为了更好的讨论规范带来的争议及问题，现已把该文档整理并开源到 <a href="https://github.com/godruoyi/restful-api-specification" target="_blank" rel="noopener">github</a>，关于大家补充及提问。</p><h2 id="关于「能愿动词」的使用"><a href="#关于「能愿动词」的使用" class="headerlink" title="关于「能愿动词」的使用"></a>关于「能愿动词」的使用</h2><p>为了避免歧义，文档大量使用了「能愿动词」，对应的解释如下：</p><ul><li><code>必须 (MUST)</code>：绝对，严格遵循，请照做，无条件遵守；</li><li><code>一定不可 (MUST NOT)</code>：禁令，严令禁止；</li><li><code>应该 (SHOULD)</code> ：强烈建议这样做，但是不强求；</li><li><code>不该 (SHOULD NOT)</code>：强烈不建议这样做，但是不强求；</li><li><code>可以 (MAY)</code> 和 <code>可选 (OPTIONAL)</code> ：选择性高一点，在这个文档内，此词语使用较少；</li></ul><blockquote><p>参见：<a href="http://www.ietf.org/rfc/rfc2119.txt" target="_blank" rel="noopener">RFC 2119</a></p></blockquote><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>在通过 <code>API</code> 于后端服务通信的过程中，<code>应该</code> 使用 <code>HTTPS</code> 协议。</p><h2 id="API-Root-URL"><a href="#API-Root-URL" class="headerlink" title="API Root URL"></a>API Root URL</h2><p><code>API</code> 的根入口点应尽可能保持足够简单，这里有两个常见的 <code>URL</code> 根例子：</p><ul><li>api.example.com/*</li><li>example.com/api/*</li></ul><blockquote><p>如果你的应用很庞大或者你预计它将会变的很庞大，那 <code>应该</code> 将 <code>API</code> 放到子域下。这种做法可以保持某些规模化上的灵活性。</p></blockquote><h2 id="Versioning"><a href="#Versioning" class="headerlink" title="Versioning"></a>Versioning</h2><p>所有的 <code>API</code> 必须保持向后兼容，你 <code>必须</code> 在引入新版本 <code>API</code> 的同时确保旧版本 <code>API</code> 仍然可用。所以 <code>应该</code> 为其提供版本支持。</p><p>目前比较常见的两种版本号形式：</p><h3 id="在-URL-中嵌入版本编号"><a href="#在-URL-中嵌入版本编号" class="headerlink" title="在 URL 中嵌入版本编号"></a>在 URL 中嵌入版本编号</h3><pre class=" language-bash"><code class="language-bash">api.example.com/v1/*</code></pre><p>这种做法是版本号直观、易于调试；另一种做法是，将版本号放在 <code>HTTP Header</code> 头中：</p><h3 id="通过媒体类型来指定版本信息"><a href="#通过媒体类型来指定版本信息" class="headerlink" title="通过媒体类型来指定版本信息"></a>通过媒体类型来指定版本信息</h3><pre class=" language-bash"><code class="language-bash">Accept: application/vnd.example.com.v1+json</code></pre><p>其中 <code>vnd</code> 表示 <code>Standards Tree</code> 标准树类型，有三个不同的树: <code>x</code>，<code>prs</code> 和 <code>vnd</code>。你使用的标准树需要取决于你开发的项目</p><ul><li>未注册的树（<code>x</code>）主要表示本地和私有环境</li><li>私有树（<code>prs</code>）主要表示没有商业发布的项目</li><li>供应商树（<code>vnd</code>）主要表示公开发布的项目</li></ul><blockquote><p>后面几个参数依次为应用名称（一般为应用域名）、版本号、期望的返回格式。</p></blockquote><p>至于具体把版本号放在什么地方，这个问题一直存在很大的争议，但由于我们大多数时间都在使用 <code>Laravel</code> 开发，<code>应该</code> 使用 <a href="https://github.com/dingo/api" target="_blank" rel="noopener">dingo/api</a> 来快速构建应用，它采用第二种方式来管理 <code>API</code> 版本，并且已集成了标准的 <code>HTTP Response</code>。</p><h2 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h2><p>端点就是指向特定资源或资源集合的 <code>URL</code>。在端点的设计中，你 <code>必须</code> 遵守下列约定：</p><ul><li>URL 的命名 <code>必须</code> 全部小写</li><li>URL 中资源（<code>resource</code>）的命名 <code>必须</code> 是名词，并且 <code>必须</code> 是复数形式</li><li><code>必须</code> 优先使用 <code>Restful</code> 类型的 URL</li><li>URL 中不能出现 <code>-</code>，<code>必须</code> 用下划线 <code>_</code> 代替</li><li>URL <code>必须</code> 是易读的</li><li>URL <code>一定不可</code> 暴露服务器架构</li></ul><p>来看一个反例</p><ul><li><a href="https://api.example.com/getUserInfo?userid=1" target="_blank" rel="noopener">https://api.example.com/getUserInfo?userid=1</a></li><li><a href="https://api.example.com/getusers" target="_blank" rel="noopener">https://api.example.com/getusers</a></li><li><a href="https://api.example.com/sv/u" target="_blank" rel="noopener">https://api.example.com/sv/u</a></li><li><a href="https://api.example.com/cgi-bin/users/get_user.php?userid=1" target="_blank" rel="noopener">https://api.example.com/cgi-bin/users/get_user.php?userid=1</a></li></ul><p>再来看一个正列</p><ul><li><a href="https://api.example.com/zoos" target="_blank" rel="noopener">https://api.example.com/zoos</a></li><li><a href="https://api.example.com/animals" target="_blank" rel="noopener">https://api.example.com/animals</a></li><li><a href="https://api.example.com/zoos/{zoo}/animals" target="_blank" rel="noopener">https://api.example.com/zoos/{zoo}/animals</a></li><li><a href="https://api.example.com/animal_types" target="_blank" rel="noopener">https://api.example.com/animal_types</a></li><li><a href="https://api.example.com/employees" target="_blank" rel="noopener">https://api.example.com/employees</a></li></ul><h2 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h2><p>对于资源的具体操作类型，由 <code>HTTP</code> 动词表示。常用的 <code>HTTP</code> 动词有下面五个（括号里是对应的 <code>SQL</code> 命令）。</p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul><p>其中</p><p>1 删除资源 <code>必须</code> 用 <code>DELETE</code> 方法<br>2 创建新的资源 <code>必须</code> 使用 <code>POST</code> 方法<br>3 更新资源 <code>应该</code> 使用 <code>PUT</code> 方法<br>4 获取资源信息 <code>必须</code> 使用 <code>GET</code> 方法</p><p>针对每一个端点来说，下面列出所有可行的 <code>HTTP</code> 动词和端点的组合</p><table><thead><tr><th>请求方法</th><th>URL</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>/zoos</td><td>列出所有的动物园(ID和名称，不要太详细)</td></tr><tr><td>POST</td><td>/zoos</td><td>新增一个新的动物园</td></tr><tr><td>GET</td><td>/zoos/{zoo}</td><td>获取指定动物园详情</td></tr><tr><td>PUT</td><td>/zoos/{zoo}</td><td>更新指定动物园(整个对象)</td></tr><tr><td>PATCH</td><td>/zoos/{zoo}</td><td>更新动物园(部分对象)</td></tr><tr><td>DELETE</td><td>/zoos/{zoo}</td><td>删除指定动物园</td></tr><tr><td>GET</td><td>/zoos/{zoo}/animals</td><td>检索指定动物园下的动物列表(ID和名称，不要太详细)</td></tr><tr><td>GET</td><td>/animals</td><td>列出所有动物(ID和名称)。</td></tr><tr><td>POST</td><td>/animals</td><td>新增新的动物</td></tr><tr><td>GET</td><td>/animals/{animal}</td><td>获取指定的动物详情</td></tr><tr><td>PUT</td><td>/animals/{animal}</td><td>更新指定的动物(整个对象)</td></tr><tr><td>PATCH</td><td>/animals/{animal}</td><td>更新指定的动物(部分对象)</td></tr><tr><td>GET</td><td>/animal_types</td><td>获取所有动物类型(ID和名称，不要太详细)</td></tr><tr><td>GET</td><td>/animal_types/{type}</td><td>获取指定的动物类型详情</td></tr><tr><td>GET</td><td>/employees</td><td>检索整个雇员列表</td></tr><tr><td>GET</td><td>/employees/{employee}</td><td>检索指定特定的员工</td></tr><tr><td>GET</td><td>/zoos/{zoo}/employees</td><td>检索在这个动物园工作的雇员的名单(身份证和姓名)</td></tr><tr><td>POST</td><td>/employees</td><td>新增指定新员工</td></tr><tr><td>POST</td><td>/zoos/{zoo}/employees</td><td>在特定的动物园雇佣一名员工</td></tr><tr><td>DELETE</td><td>/zoos/{zoo}/employees/{employee}</td><td>从某个动物园解雇一名员工</td></tr></tbody></table><h2 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h2><blockquote><p>如果记录数量很多，服务器不可能都将它们返回给用户。API <code>应该</code> 提供参数，过滤返回结果。下面是一些常见的参数。</p></blockquote><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ul><p>所有 <code>URL</code> 参数 <code>必须</code> 是全小写，<code>必须</code> 使用下划线类型的参数形式。</p><p>经常使用的、复杂的查询 <code>应该</code> 标签化，降低维护成本。如</p><pre class=" language-bash"><code class="language-bash">GET /trades?status<span class="token operator">=</span>closed<span class="token operator">&amp;</span>sort<span class="token operator">=</span>sortby<span class="token operator">=</span>name<span class="token operator">&amp;</span>order<span class="token operator">=</span>asc<span class="token comment" spellcheck="true"># 可为其定制快捷方式</span>GET /trades/recently_closed</code></pre><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p><code>应该</code> 使用 <code>OAuth2.0</code> 的方式为 API 调用者提供登录认证。<code>必须</code> 先通过登录接口获取 <code>Access Token</code> 后再通过该 <code>token</code> 调用需要身份认证的 <code>API</code>。</p><p>Oauth 的端点设计示列</p><ul><li>RFC 6749   /token</li><li>Twitter    /oauth2/token</li><li>Fackbook   /oauth/access_token</li><li>Google     /o/oauth2/token</li><li>Github     /login/oauth/access_token</li><li>Instagram  /oauth/authorize</li></ul><p>客户端在获得 <code>access token</code> 的同时 <code>必须</code> 在响应中包含一个名为 <code>expires_in</code> 的数据，它表示当前获得的 <code>token</code> 会在多少 <code>秒</code> 后失效。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"access_token"</span><span class="token operator">:</span> <span class="token string">"token...."</span><span class="token punctuation">,</span>    <span class="token property">"token_type"</span><span class="token operator">:</span> <span class="token string">"Bearer"</span><span class="token punctuation">,</span>    <span class="token property">"expires_in"</span><span class="token operator">:</span> <span class="token number">3600</span><span class="token punctuation">}</span></code></pre><p>客户端在请求需要认证的 <code>API</code> 时，<code>必须</code> 在请求头 <code>Authorization</code> 中带上 <code>access_token</code>。</p><pre class=" language-bash"><code class="language-bash">Authorization: Bearer token<span class="token punctuation">..</span>.</code></pre><p>当超过指定的秒数后，<code>access token</code> 就会过期，再次用过期/或无效的 <code>token</code> 访问时，服务端 <code>应该</code> 返回 <code>invalid_token</code> 的错误或 <code>401</code> 错误码。</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">401 Unauthorized</span></span><span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Cache-Control:</span> no-store<span class="token header-name keyword">Pragma:</span> no-cache<span class="token application/json"><span class="token punctuation">{</span>    <span class="token string">"error"</span><span class="token punctuation">:</span> <span class="token string">"invalid_token"</span><span class="token punctuation">}</span></span></code></pre><blockquote><p>Laravel 开发中，<code>应该</code> 使用 <a href="https://github.com/tymondesigns/jwt-auth" target="_blank" rel="noopener">JWT</a> 来为管理你的 Token，并且 <code>一定不可</code> 在 <code>api</code> 中间件中开启请求 <code>session</code>。</p></blockquote><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p>所有的 <code>API</code> 响应，<code>必须</code> 遵守 <code>HTTP</code> 设计规范，<code>必须</code> 选择合适的 <code>HTTP</code> 状态码。<code>一定不可</code> 所有接口都返回状态码为 <code>200</code> 的 <code>HTTP</code> 响应，如：</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">200 ok</span></span><span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Server:</span> example.com<span class="token application/json"><span class="token punctuation">{</span>    <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"username"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span></code></pre><p>或</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">200 ok</span></span><span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Server:</span> example.com<span class="token application/json"><span class="token punctuation">{</span>    <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"该活动不存在"</span><span class="token punctuation">,</span><span class="token punctuation">}</span></span></code></pre><p>下表列举了常见的 <code>HTTP</code> 状态码</p><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>代表请求已被接受，需要继续处理</td></tr><tr><td>2xx</td><td>请求已成功，请求所希望的响应头或数据体将随此响应返回</td></tr><tr><td>3xx</td><td>重定向</td></tr><tr><td>4xx</td><td>客户端原因引起的错误</td></tr><tr><td>5xx</td><td>服务端原因引起的错误</td></tr></tbody></table><blockquote><p>只有来自客户端的请求被正确的处理后才能返回 <code>2xx</code> 的响应，所以当 API 返回 <code>2xx</code> 类型的状态码时，前端 <code>必须</code> 认定该请求已处理成功。</p></blockquote><p>必须强调的是，所有 <code>API</code> <code>一定不可</code> 返回 <code>1xx</code> 类型的状态码。当 <code>API</code> 发生错误时，<code>必须</code> 返回出错时的详细信息。目前常见返回错误信息的方法有两种：</p><p>1、将错误详细放入 <code>HTTP</code> 响应首部；</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">X-MYNAME-ERROR-CODE:</span> 4001<span class="token header-name keyword">X-MYNAME-ERROR-MESSAGE:</span> Bad authentication token<span class="token header-name keyword">X-MYNAME-ERROR-INFO:</span> http://docs.example.com/api/v1/authentication</code></pre><p>2、直接放入响应实体中；</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">401 Unauthorized</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 10:02:59 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"error_code"</span><span class="token punctuation">:</span><span class="token number">40100</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"Unauthorized"</span><span class="token punctuation">}</span></span></code></pre><p>考虑到易读性和客户端的易处理性，我们 <code>必须</code> 把错误信息直接放到响应实体中，并且错误格式 <code>应该</code> 满足如下格式：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"您查找的资源不存在"</span><span class="token punctuation">,</span>    <span class="token property">"error_code"</span><span class="token operator">:</span> <span class="token number">404001</span><span class="token punctuation">}</span></code></pre><p>其中错误码（<code>error_code</code>）<code>必须</code> 和 <code>HTTP</code> 状态码对应，也方便错误码归类，如：</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">429 Too Many Requests</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 10:15:52 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"error_code"</span><span class="token punctuation">:</span><span class="token number">429001</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"你操作太频繁了"</span><span class="token punctuation">}</span></span></code></pre><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">403 Forbidden</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 10:19:27 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"error_code"</span><span class="token punctuation">:</span><span class="token number">403002</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"用户已禁用"</span><span class="token punctuation">}</span></span></code></pre><p><code>应该</code> 在返回的错误信息中，同时包含面向开发者和面向用户的提示信息，前者可方便开发人员调试，后者可直接展示给终端用户查看如：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"直接展示给终端用户的错误信息"</span><span class="token punctuation">,</span>    <span class="token property">"error_code"</span><span class="token operator">:</span> <span class="token string">"业务错误码"</span><span class="token punctuation">,</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"供开发者查看的错误信息"</span><span class="token punctuation">,</span>    <span class="token property">"debug"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"错误堆栈，必须开启 debug 才存在"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>下面详细列举了各种情况 API 的返回说明。</p><h3 id="200-ok"><a href="#200-ok" class="headerlink" title="200 ok"></a>200 ok</h3><p><code>200</code> 状态码是最常见的 <code>HTTP</code> 状态码，在所有 <strong>成功</strong> 的 <code>GET</code> 请求中，<code>必须</code> 返回此状态码。<code>HTTP</code> 响应实体部分 <code>必须</code> 直接就是数据，不要做多余的包装。</p><p>错误示例：</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">200 ok</span></span><span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Server:</span> example.com<span class="token application/json"><span class="token punctuation">{</span>    <span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"nickname"</span><span class="token punctuation">:</span><span class="token string">"fwest"</span><span class="token punctuation">,</span>        <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"example"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span></code></pre><p>正确示例：</p><p>1、获取单个资源详情</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"godruoyi"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">88</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>2、获取资源集合</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"godruoyi"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">88</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">88</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>3、额外的媒体信息</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://lorempixel.com/640/480/?32556"</span><span class="token punctuation">,</span>            <span class="token property">"nickname"</span><span class="token operator">:</span> <span class="token string">"fwest"</span><span class="token punctuation">,</span>            <span class="token property">"last_logined_time"</span><span class="token operator">:</span> <span class="token string">"2018-05-29 04:56:43"</span><span class="token punctuation">,</span>            <span class="token property">"has_registed"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://lorempixel.com/640/480/?86144"</span><span class="token punctuation">,</span>            <span class="token property">"nickname"</span><span class="token operator">:</span> <span class="token string">"zschowalter"</span><span class="token punctuation">,</span>            <span class="token property">"last_logined_time"</span><span class="token operator">:</span> <span class="token string">"2018-06-16 15:18:34"</span><span class="token punctuation">,</span>            <span class="token property">"has_registed"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"pagination"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span>            <span class="token property">"count"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"per_page"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"current_page"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"total_pages"</span><span class="token operator">:</span> <span class="token number">51</span><span class="token punctuation">,</span>            <span class="token property">"links"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"next"</span><span class="token operator">:</span> <span class="token string">"http://api.example.com?page=2"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>其中，分页和其他额外的媒体信息，必须放到 <code>meta</code> 字段中。</p></blockquote><h3 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h3><p>当服务器创建数据成功时，<code>应该</code> 返回此状态码。常见的应用场景是使用 <code>POST</code> 提交用户信息，如：</p><ul><li>添加了新用户</li><li>上传了图片</li><li>创建了新活动</li></ul><p>等，都可以返回 <code>201</code> 状态码。需要注意的是，你可以选择在用户创建成功后返回新用户的数据</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">201 Created</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 09:13:40 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span class="token application/json"><span class="token punctuation">{</span>    <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"https:\/\/lorempixel.com\/640\/480\/?32556"</span><span class="token punctuation">,</span>    <span class="token string">"nickname"</span><span class="token punctuation">:</span> <span class="token string">"fwest"</span><span class="token punctuation">,</span>    <span class="token string">"last_logined_time"</span><span class="token punctuation">:</span> <span class="token string">"2018-05-29 04:56:43"</span><span class="token punctuation">,</span>    <span class="token string">"created_at"</span><span class="token punctuation">:</span> <span class="token string">"2018-06-16 17:55:55"</span><span class="token punctuation">,</span>    <span class="token string">"updated_at"</span><span class="token punctuation">:</span> <span class="token string">"2018-06-16 17:55:55"</span><span class="token punctuation">}</span></span></code></pre><p>也可以返回一个响应实体为空的 <code>HTTP Response</code> 如：</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">201 Created</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> text/html; charset=UTF-8<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 09:12:20 GMT<span class="token header-name keyword">Connection:</span> keep-alive</code></pre><blockquote><p>这里我们 <code>应该</code> 采用第二种方式，因为大多数情况下，客户端只需要知道该请求操作成功与否，并不需要返回新资源的信息。</p></blockquote><h3 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h3><p>该状态码表示服务器已经接受到了来自客户端的请求，但还未开始处理。常用短信发送、邮件通知、模板消息推送等这类很耗时需要队列支持的场景中；</p><blockquote><p>返回该状态码时，响应实体 <code>必须</code> 为空。</p></blockquote><pre class=" language-html"><code class="language-html">HTTP/1.1 202 AcceptedServer: nginx/1.11.9Content-Type: text/html; charset=UTF-8Transfer-Encoding: chunkedDate: Sun, 24 Jun 2018 09:25:15 GMTConnection: keep-alive</code></pre><h3 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h3><p>该状态码表示响应实体不包含任何数据，其中：</p><ul><li>在使用 <code>DELETE</code> 方法删除资源 <strong>成功</strong> 时，<code>必须</code> 返回该状态码</li><li>使用 <code>PUT</code>、<code>PATCH</code> 方法更新数据 <strong>成功</strong> 时，也 <code>应该</code> 返回此状态码</li></ul><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">204 No Content</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 09:29:12 GMT<span class="token header-name keyword">Connection:</span> keep-alive</code></pre><h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h3><p>所有 <code>API</code> <code>一定不可</code> 返回 <code>3xx</code> 类型的状态码。因为 <code>3xx</code> 类型的响应格式一般为下列格式：</p><pre class=" language-html"><code class="language-html">HTTP/1.1 302 FoundServer: nginx/1.11.9Content-Type: text/html; charset=UTF-8Transfer-Encoding: chunkedCache-Control: no-cache, privateDate: Sun, 24 Jun 2018 09:41:50 GMTLocation: https://example.comConnection: keep-alive<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0;url<span class="token punctuation">=</span>https://example.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Redirecting to https://example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        Redirecting to <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>https://example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><code>API</code> <code>一定不可</code> 返回纯 <code>HTML</code> 结构的响应；若一定要使用重定向功能，<code>应该</code> 返回一个响应实体为空的 <code>3xx</code> 响应，并在响应头中加上 <code>Location</code> 字段:</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">302 Found</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> text/html; charset=UTF-8<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 09:52:50 GMT<span class="token header-name keyword">Location:</span> https://godruoyi.com<span class="token header-name keyword">Connection:</span> keep-alive</code></pre><h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h3><p>由于明显的客户端错误（例如，请求语法格式错误、无效的请求、无效的签名等），服务器 <code>应该</code> 放弃该请求。</p><blockquote><p>当服务器无法从其他 4xx 类型的状态码中找出合适的来表示错误类型时，都 <code>必须</code> 返回该状态码。</p></blockquote><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">400 Bad Request</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 13:22:36 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"error_code"</span><span class="token punctuation">:</span><span class="token number">40000</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"无效的签名"</span><span class="token punctuation">}</span></span></code></pre><h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p>该状态码表示当前请求需要身份认证，以下情况都 <code>必须</code> 返回该状态码。</p><ul><li>未认证用户访问需要认证的 API</li><li>access_token 无效/过期</li></ul><blockquote><p>客户端在收到 <code>401</code> 响应后，都 <code>应该</code> 提示用户进行下一步的登录操作。</p></blockquote><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">401 Unauthorized</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">WWW-Authenticate:</span> JWTAuth<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 13:17:02 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span class="token application/json"><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"Token Signature could not be verified."</span><span class="token punctuation">,</span><span class="token string">"error_code"</span><span class="token punctuation">:</span> <span class="token string">"40100"</span><span class="token punctuation">}</span></span></code></pre><h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h3><p>该状态码可以简单的理解为没有权限访问该请求，服务器收到请求但拒绝提供服务。</p><p>如当普通用户请求操作管理员用户时，<code>必须</code> 返回该状态码。</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">403 Forbidden</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 13:05:34 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"error_code"</span><span class="token punctuation">:</span><span class="token number">40301</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"权限不足"</span><span class="token punctuation">}</span></span></code></pre><h3 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h3><p>该状态码表示用户请求的资源不存在，如</p><ul><li>获取不存在的用户信息 （get /users/9999999）</li><li>访问不存在的端点</li></ul><p>都 <code>必须</code> 返回该状态码，若该资源已永久不存在，则 <code>应该</code> 返回 <code>401</code> 响应。</p><h3 id="405-Method-Not-Allowd"><a href="#405-Method-Not-Allowd" class="headerlink" title="405 Method Not Allowd"></a>405 Method Not Allowd</h3><p>当客户端使用的 <code>HTTP</code> 请求方法不被服务器允许时，<code>必须</code> 返回该状态码。</p><blockquote><p>如客户端调用了 <code>POST</code> 方法来访问只支持 GET 方法的 API</p></blockquote><p>该响应 <code>必须</code> 返回一个 <code>Allow</code> 头信息用以表示出当前资源能够接受的请求方法的列表。</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">405 Method Not Allowed</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Allow:</span> GET, HEAD<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 12:30:57 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"405 Method Not Allowed"</span><span class="token punctuation">,</span><span class="token string">"error_code"</span><span class="token punctuation">:</span> <span class="token number">40500</span><span class="token punctuation">}</span></span></code></pre><h3 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a>406 Not Acceptable</h3><p><code>API</code> 在不支持客户端指定的数据格式时，应该返回此状态码。如支持 <code>JSON</code> 和 <code>XML</code> 输出的 <code>API</code> 被指定返回 <code>YAML</code> 格式的数据时。</p><blockquote><p>Http 协议一般通过请求首部的 Accept 来指定数据格式</p></blockquote><h3 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a>408 Request Timeout</h3><p>客户端请求超时时 <code>必须</code> 返回该状态码，需要注意的时，该状态码表示 <strong>客户端请求超时</strong>，在涉及第三方 <code>API</code> 调用超时时，<code>一定不可</code> 返回该状态码。</p><h3 id="409-Gonfilct"><a href="#409-Gonfilct" class="headerlink" title="409 Gonfilct"></a>409 Gonfilct</h3><p>该状态码表示因为请求存在冲突无法处理。如通过手机号码提供注册功能的 <code>API</code>，当用户提交的手机号已存在时，<code>必须</code> 返回此状态码。</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">409 Gonfilct</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 12:19:04 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"error_code"</span><span class="token punctuation">:</span><span class="token number">40900</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"手机号已存在"</span><span class="token punctuation">}</span></span></code></pre><h3 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a>410 Gone</h3><p>和 <code>404</code> 类似，该状态码也表示请求的资源不存在，只是 <code>410</code> 状态码进一步表示所请求的资源已不存在，并且未来也不会存在。在收到 <code>410</code> 状态码后，客户端 <code>应该</code> 停止再次请求该资源。</p><h3 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h3><p>该状态码表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。</p><blockquote><p>此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p></blockquote><p>如果这个状况是临时的，服务器 <code>应该</code> 返回一个 <code>Retry-After</code> 的响应头，以告知客户端可以在多少时间以后重新尝试。</p><h3 id="414-Request-URI-Too-Long"><a href="#414-Request-URI-Too-Long" class="headerlink" title="414 Request-URI Too Long"></a>414 Request-URI Too Long</h3><p>该状态码表示请求的 <code>URI</code> 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。</p><h3 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a>415 Unsupported Media Type</h3><p>通常表示服务器不支持客户端请求首部 <code>Content-Type</code> 指定的数据格式。如在只接受 <code>JSON</code> 格式的 <code>API</code> 中放入 <code>XML</code> 类型的数据并向服务器发送，都 <code>应该</code> 返回该状态码。</p><p>该状态码也可用于如：只允许上传图片格式的文件，但是客户端提交媒体文件非法或不是图片类型，这时 <code>应该</code> 返回该状态码：</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">415 Unsupported Media Type</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 12:09:40 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"error_code"</span><span class="token punctuation">:</span><span class="token number">41500</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"不允许上传的图片格式"</span><span class="token punctuation">}</span></span></code></pre><h3 id="429-Too-Many-Request"><a href="#429-Too-Many-Request" class="headerlink" title="429 Too Many Request"></a>429 Too Many Request</h3><p>该状态码表示用户请求次数超过允许范围。如 <code>API</code> 设定为 <code>60次/分钟</code>，当用户在一分钟内请求次数超过 60 次后，都 <code>应该</code> 返回该状态码。并且也 <code>应该</code> 在响应首部中加上下列头部：</p><pre class=" language-bash"><code class="language-bash">X-RateLimit-Limit: 10 请求速率（由应用设定，其单位一般为小时/分钟等，这里是 10次/5分钟）X-RateLimit-Remaining: 0 当前剩余的请求数量X-RateLimit-Reset: 1529839462 重置时间Retry-After: 120 下一次访问应该等待的时间（秒）</code></pre><p>列子</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">429 Too Many Requests</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">X-RateLimit-Limit:</span> 10<span class="token header-name keyword">X-RateLimit-Remaining:</span> 0<span class="token header-name keyword">X-RateLimit-Reset:</span> 1529839462<span class="token header-name keyword">Retry-After:</span> 290<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 11:19:32 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"You have exceeded your rate limit."</span><span class="token punctuation">,</span><span class="token string">"error_code"</span><span class="token punctuation">:</span><span class="token number">42900</span><span class="token punctuation">}</span></span></code></pre><p><code>必须</code> 为所有的 API 设置 Rate Limit 支持。</p><h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h3><p>该状态码 <code>必须</code> 在服务器出错时抛出，对于所有的 <code>500</code> 错误，都 <code>应该</code> 提供完整的错误信息支持，也方便跟踪调试。</p><h3 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h3><p>该状态码表示服务器暂时处理不可用状态，当服务器需要维护或第三方 <code>API</code> 请求超时/不可达时，都 <code>应该</code> 返回该状态码，其中若是主动关闭 API 服务，<code>应该</code>在返回的响应首部加上 <code>Retry-After</code> 头部，表示多少秒后可以再次访问。</p><pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">503 Service Unavailable</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 10:56:20 GMT<span class="token header-name keyword">Retry-After:</span> 60<span class="token header-name keyword">Connection:</span> keep-alive<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"error_code"</span><span class="token punctuation">:</span><span class="token number">50300</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"服务维护中"</span><span class="token punctuation">}</span></span></code></pre><p>其他 <code>HTTP</code> 状态码请参考 <a href="https://zh.wikipedia.org/zh-hans/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">HTTP 状态码- 维基百科</a>。</p><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><blockquote><p>文章发布于 <a href="https://godruoyi.com/posts/the-resetful-api-design-specification" target="_blank" rel="noopener">二楞徐的闲谈杂鱼</a>，自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="noopener">创意共享3.0许可证</a>）</p></blockquote><h2 id="建议参考"><a href="#建议参考" class="headerlink" title="建议参考"></a>建议参考</h2><p><a href="https://github.com/aisuhua/restful-api-design-references" target="_blank" rel="noopener">restful-api-design-references</a></p><p><a href="http://www.cnblogs.com/moonz-wu/p/4211626.html" target="_blank" rel="noopener">Principles of good RESTful API Design（译）</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解 RESTful 架构</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a></p><p><a href="https://zh.wikipedia.org/zh-hans/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">HTTP 状态码- 维基百科</a></p>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 的十八个最佳实践</title>
      <link href="/laravel/laravel-de-shi-ba-ge-zui-jia-shi-jian/"/>
      <url>/laravel/laravel-de-shi-ba-ge-zui-jia-shi-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转载于<code>LearnKu</code> <a href="https://learnku.com/articles/12762/eighteen-best-practices-of-laravel" target="_blank" rel="noopener">Laravel 的十八个最佳实践</a></p></blockquote><hr><ul><li>本文翻译改编自 <a href="https://github.com/alexeymezenin/laravel-best-practices" target="_blank" rel="noopener">Laravel 的十八个最佳实践</a></li></ul><p>这篇文章并不是什么由 Laravel 改编的 SOLID 原则、模式等。</p><p>只是为了让你注意你在现实生活的 Laravel 项目中最常忽略的内容。</p><h2 id="单一责任原则"><a href="#单一责任原则" class="headerlink" title="单一责任原则"></a>单一责任原则</h2><p>一个类和一个方法应该只有一个职责。<br>错误的做法：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getFullNameAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">'client'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isVerified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'Mr. '</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">first_name</span> <span class="token punctuation">.</span> <span class="token string">' '</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">middle_name</span> <span class="token punctuation">.</span> <span class="token string">' '</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">last_name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">first_name</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'. '</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">last_name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>推荐的做法：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getFullNameAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isVerifiedClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFullNameLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFullNameShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isVerifiedClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">'client'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isVerified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getFullNameLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'Mr. '</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">first_name</span> <span class="token punctuation">.</span> <span class="token string">' '</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">middle_name</span> <span class="token punctuation">.</span> <span class="token string">' '</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">last_name</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getFullNameShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">first_name</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'. '</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">last_name</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="强大的模型-amp-简单控制器"><a href="#强大的模型-amp-简单控制器" class="headerlink" title="强大的模型 &amp; 简单控制器"></a>强大的模型 &amp; 简单控制器</h2><p>如果你使用查询构造器或原始 SQL 来查询，请将所有与数据库相关的逻辑放入 Eloquent 模型或存储库类中。 </p><p>坏：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$clients</span> <span class="token operator">=</span> Client<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">verified</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'orders'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$q</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'created_at'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> Carbon<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">today</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">subWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'clients'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$clients</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>好：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'clients'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">client</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getWithNewOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">Class</span> <span class="token class-name">Client</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getWithNewOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">verified</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'orders'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$q</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'created_at'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> Carbon<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">today</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">subWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>将验证从控制器移动到请求类。 </p><p>很常见但不推荐的做法：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">'title'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'required|unique:posts|max:255'</span><span class="token punctuation">,</span>        <span class="token string">'body'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'required'</span><span class="token punctuation">,</span>        <span class="token string">'publish_at'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'nullable|date'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>最好是这样：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span>PostRequest <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PostRequest</span> <span class="token keyword">extends</span> <span class="token class-name">Request</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>            <span class="token string">'title'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'required|unique:posts|max:255'</span><span class="token punctuation">,</span>            <span class="token string">'body'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'required'</span><span class="token punctuation">,</span>            <span class="token string">'publish_at'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'nullable|date'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="业务逻辑应该在服务类中"><a href="#业务逻辑应该在服务类中" class="headerlink" title="业务逻辑应该在服务类中"></a>业务逻辑应该在服务类中</h2><p>一个控制器必须只有一个职责，因此应该将业务逻辑从控制器移到服务类。 </p><p>坏：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">hasFile</span><span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token function">public_path</span><span class="token punctuation">(</span><span class="token string">'images'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'temp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>好：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">articleService</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">handleUploadedImage</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ArticleService</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handleUploadedImage</span><span class="token punctuation">(</span><span class="token variable">$image</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$image</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$image</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token function">public_path</span><span class="token punctuation">(</span><span class="token string">'images'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'temp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="不要重复你自己（DRY）"><a href="#不要重复你自己（DRY）" class="headerlink" title="不要重复你自己（DRY）"></a>不要重复你自己（DRY）</h2><p>尽可能重用代码。 SRP（单一职责原则）正在帮助你避免重复。当然，这也包括了 Blade 模板、Eloquent 的范围等。</p><p>坏：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'verified'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">whereNotNull</span><span class="token punctuation">(</span><span class="token string">'deleted_at'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getArticles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">whereHas</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$q</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'verified'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">whereNotNull</span><span class="token punctuation">(</span><span class="token string">'deleted_at'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>好：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">scopeActive</span><span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$q</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'verified'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">whereNotNull</span><span class="token punctuation">(</span><span class="token string">'deleted_at'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getArticles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">whereHas</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$q</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="最好倾向于使用-Eloquent-而不是-Query-Builder-和原生的-SQL-查询。要优先于数组的集合"><a href="#最好倾向于使用-Eloquent-而不是-Query-Builder-和原生的-SQL-查询。要优先于数组的集合" class="headerlink" title="最好倾向于使用 Eloquent 而不是 Query Builder 和原生的 SQL 查询。要优先于数组的集合"></a>最好倾向于使用 Eloquent 而不是 Query Builder 和原生的 SQL 查询。要优先于数组的集合</h2><p>Eloquent 可以编写可读和可维护的代码。此外，Eloquent 也拥有很棒的内置工具，比如软删除、事件、范围等。</p><p>比如你这样写：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>articles<span class="token punctuation">`</span><span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span>              <span class="token keyword">FROM</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span>              <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>articles<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span>              <span class="token operator">AND</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span>                          <span class="token keyword">FROM</span> <span class="token punctuation">`</span>profiles<span class="token punctuation">`</span>                          <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>profiles<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span>               <span class="token operator">AND</span> <span class="token punctuation">`</span>users<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>deleted_at<span class="token punctuation">`</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token operator">AND</span> <span class="token punctuation">`</span>verified<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token operator">AND</span> <span class="token punctuation">`</span>active<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>created_at<span class="token punctuation">`</span> <span class="token keyword">DESC</span></code></pre><p>还不如这样写：</p><pre class=" language-php"><code class="language-php">Article<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'user.profile'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">verified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">latest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="批量赋值"><a href="#批量赋值" class="headerlink" title="批量赋值"></a>批量赋值</h2><p>比如你这样写：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$article</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">;</span><span class="token variable">$article</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">title</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">title</span><span class="token punctuation">;</span><span class="token variable">$article</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">;</span><span class="token variable">$article</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">verified</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">verified</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Add category to article</span><span class="token variable">$article</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">category_id</span> <span class="token operator">=</span> <span class="token variable">$category</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">;</span><span class="token variable">$article</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>是不是还不如这样写：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$category</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="不要在-Blade-模板中执行查询并使用关联加载（N-1-问题）"><a href="#不要在-Blade-模板中执行查询并使用关联加载（N-1-问题）" class="headerlink" title="不要在 Blade 模板中执行查询并使用关联加载（N + 1 问题）"></a>不要在 Blade 模板中执行查询并使用关联加载（N + 1 问题）</h2><p>不好的地方在于，这对于100 个用户来说，等于执行 101 个 DB 查询：</p><pre class=" language-php"><code class="language-php">@<span class="token keyword">foreach</span> <span class="token punctuation">(</span>User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">profile</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>@<span class="token keyword">endforeach</span></code></pre><p>下面的做法，对于 100 个用户来说，仅仅只执行 2 个 DB 查询：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$users</span> <span class="token operator">=</span> User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">'profile'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>@<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$users</span> <span class="token keyword">as</span> <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">profile</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>@<span class="token keyword">endforeach</span></code></pre><h2 id="与其花尽心思给你的代码写注释，还不如对方法或变量写一个描述性的名称"><a href="#与其花尽心思给你的代码写注释，还不如对方法或变量写一个描述性的名称" class="headerlink" title="与其花尽心思给你的代码写注释，还不如对方法或变量写一个描述性的名称"></a>与其花尽心思给你的代码写注释，还不如对方法或变量写一个描述性的名称</h2><p>坏：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">)</span> <span class="token variable">$builder</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">joins</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>好：</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 确定是否有任何连接。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">)</span> <span class="token variable">$builder</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">joins</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>最好：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">hasJoins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="不要把-JS-和-CSS-放在-Blade-模板中，也不要将任何-HTML-放在-PHP-类中"><a href="#不要把-JS-和-CSS-放在-Blade-模板中，也不要将任何-HTML-放在-PHP-类中" class="headerlink" title="不要把 JS 和 CSS 放在 Blade 模板中，也不要将任何 HTML 放在 PHP 类中"></a>不要把 JS 和 CSS 放在 Blade 模板中，也不要将任何 HTML 放在 PHP 类中</h2><p>坏：</p><pre class=" language-php"><code class="language-php">let article <span class="token operator">=</span> `<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$article</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>`<span class="token punctuation">;</span></code></pre><p>好：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>article<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ json_encode($article) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token keyword">Or</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js-fav-article<span class="token punctuation">"</span></span> <span class="token attr-name">data-article</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ json_encode($article) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$article</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span></span></code></pre><p>最好的方法是使用在 Javascript 中这样来传输数据：</p><pre class=" language-php"><code class="language-php">let article <span class="token operator">=</span> $<span class="token punctuation">(</span><span class="token string">'#article'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="在代码中使用配置和语言文件、常量，而不是写死它"><a href="#在代码中使用配置和语言文件、常量，而不是写死它" class="headerlink" title="在代码中使用配置和语言文件、常量，而不是写死它"></a>在代码中使用配置和语言文件、常量，而不是写死它</h2><p> 坏：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$article</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">type</span> <span class="token operator">===</span> <span class="token string">'normal'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token string">'Your article has been added!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>好：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$article</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">type</span> <span class="token operator">===</span> Article<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_NORMAL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'app.article_added'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="使用社区接受的标准的-Laravel-工具"><a href="#使用社区接受的标准的-Laravel-工具" class="headerlink" title="使用社区接受的标准的 Laravel 工具"></a>使用社区接受的标准的 Laravel 工具</h2><p>最好使用内置的 Laravel 功能和社区软件包，而不是其他第三方软件包和工具。因为将来与你的应用程序一起工作的开发人员都需要学习新的工具。另外，使用第三方软件包或工具的话，如果遇到困难，从 Laravel 社区获得帮助的机会会大大降低。不要让你的客户为此付出代价！</p><table><thead><tr><th>任务</th><th>标准工具</th><th>第三方工具</th></tr></thead><tbody><tr><td>授权</td><td>Policies</td><td>Entrust, Sentinel and other packages</td></tr><tr><td>前端编译</td><td>Laravel Mix</td><td>Grunt, Gulp, 3rd party packages</td></tr><tr><td>开发环境</td><td>Homestead</td><td>Docker</td></tr><tr><td>部署</td><td>Laravel Forge</td><td>Deployer and other solutions</td></tr><tr><td>单元测试</td><td>PHPUnit, Mockery</td><td>Phpspec</td></tr><tr><td>浏览器测试</td><td>Laravel Dusk</td><td>Codeception</td></tr><tr><td>数据库操作</td><td>Eloquent</td><td>SQL, Doctrine</td></tr><tr><td>模板</td><td>Blade</td><td>Twig</td></tr><tr><td>数据操作</td><td>Laravel collections</td><td>Arrays</td></tr><tr><td>表单验证</td><td>Request classes</td><td>3rd party packages, validation in controller</td></tr><tr><td>认证</td><td>Built-in</td><td>3rd party packages, your own solution</td></tr><tr><td>API 认证</td><td>Laravel Passport</td><td>3rd party JWT and OAuth packages</td></tr><tr><td>创建 API</td><td>Built-in</td><td>Dingo API and similar packages</td></tr><tr><td>数据库结构操作</td><td>Migrations</td><td>Working with DB structure directly</td></tr><tr><td>局部化</td><td>Built-in</td><td>3rd party packages</td></tr><tr><td>实时用户接口</td><td>Laravel Echo, Pusher</td><td>3rd party packages and working with WebSockets directly</td></tr><tr><td>Generating testing data</td><td>Seeder classes, Model Factories, Faker</td><td>Creating testing data manually</td></tr><tr><td>生成测试数据</td><td>Laravel Task Scheduler</td><td>Scripts and 3rd party packages</td></tr><tr><td>数据库</td><td>MySQL, PostgreSQL, SQLite, SQL Server</td><td>MongoDB</td></tr></tbody></table><h2 id="遵循Laravel命名约定"><a href="#遵循Laravel命名约定" class="headerlink" title="遵循Laravel命名约定"></a>遵循Laravel命名约定</h2><p>遵循 <a href="http://www.php-fig.org/psr/psr-2/" target="_blank" rel="noopener">PSR 标准</a>。 另外，请遵循 Laravel 社区接受的命名约定：</p><table><thead><tr><th>类型</th><th>规则</th><th>正确示例</th><th>错误示例</th></tr></thead><tbody><tr><td>Controller</td><td>单数</td><td>ArticleController</td><td><del>ArticlesController</del></td></tr><tr><td>Route</td><td>复数</td><td>articles/1</td><td><del>article/1</del></td></tr><tr><td>Named route</td><td>带点符号的蛇形命名</td><td>users.show_active</td><td><del>users.show-active, show-active-users</del></td></tr><tr><td>Model</td><td>单数</td><td>User</td><td><del>Users</del></td></tr><tr><td>hasOne or belongsTo relationship</td><td>单数</td><td>articleComment</td><td><del>articleComments, article_comment</del></td></tr><tr><td>All other relationships</td><td>复数</td><td>articleComments</td><td><del>articleComment, article_comments</del></td></tr><tr><td>Table</td><td>复数</td><td>article_comments</td><td><del>article_comment, articleComments</del></td></tr><tr><td>Pivot table</td><td>按字母顺序排列的单数模型名称</td><td>article_user</td><td><del>user_article, articles_users</del></td></tr><tr><td>Table column</td><td>带着模型名称的蛇形命名</td><td>meta_title</td><td><del>MetaTitle; article_meta_title</del></td></tr><tr><td>Foreign key</td><td>带_id后缀的单数型号名称</td><td>article_id</td><td><del>ArticleId, id_article, articles_id</del></td></tr><tr><td>Primary key</td><td>-</td><td>id</td><td><del>custom_id</del></td></tr><tr><td>Migration</td><td>-</td><td>2017_01_01_000_create_xx_table</td><td><del>2017_01_01_0000_articles</del></td></tr><tr><td>Method</td><td>小驼峰命名</td><td>getAll</td><td><del>get_all</del></td></tr><tr><td>Method in resource controller</td><td><a href="https://laravel.com/docs/master/controllers#resource-controllers" target="_blank" rel="noopener">具体看表格</a></td><td>store</td><td><del>saveArticle</del></td></tr><tr><td>Method in test class</td><td>小驼峰命名</td><td>testGuestCannotSeeArticle</td><td><del>test_guest_cannot_see_article</del></td></tr><tr><td>Variable</td><td>小驼峰命名</td><td>$articlesWithAuthor</td><td><del>$articles_with_author</del></td></tr><tr><td>Collection</td><td>具描述性的复数形式</td><td>$activeUsers = User::active()-&gt;get()</td><td><del>$active, $data</del></td></tr><tr><td>Object</td><td>具描述性的单数形式</td><td>$activeUser = User::active()-&gt;first()</td><td><del>$users, $obj</del></td></tr><tr><td>Config and language files index</td><td>蛇形命名</td><td>articles_enabled</td><td><del>ArticlesEnabled; articles-enabled</del></td></tr><tr><td>View</td><td>蛇形命名</td><td>show_filtered.blade.php</td><td><del>showFiltered.blade.php, show-filtered.blade.php</del></td></tr><tr><td>Config</td><td>蛇形命名</td><td>google_calendar.php</td><td><del>googleCalendar.php, google-calendar.php</del></td></tr><tr><td>Contract (interface)</td><td>形容词或名词</td><td>Authenticatable</td><td><del>AuthenticationInterface, IAuthentication</del></td></tr><tr><td>Trait</td><td>形容词</td><td>Notifiable</td><td><del>NotificationTrait</del></td></tr></tbody></table><h2 id="尽可能使用更短、更易读的语法"><a href="#尽可能使用更短、更易读的语法" class="headerlink" title="尽可能使用更短、更易读的语法"></a>尽可能使用更短、更易读的语法</h2><p>坏：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'cart'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>好：</p><pre class=" language-php"><code class="language-php"><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">'cart'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span></code></pre><p>更多示例：</p><table><thead><tr><th>通用语法</th><th>更短、更可读的语法</th></tr></thead><tbody><tr><td><code>Session::get(&#39;cart&#39;)</code></td><td><code>session(&#39;cart&#39;)</code></td></tr><tr><td><code>$request-&gt;session()-&gt;get(&#39;cart&#39;)</code></td><td><code>session(&#39;cart&#39;)</code></td></tr><tr><td><code>Session::put(&#39;cart&#39;, $data)</code></td><td><code>session([&#39;cart&#39; =&gt; $data])</code></td></tr><tr><td><code>$request-&gt;input(&#39;name&#39;), Request::get(&#39;name&#39;)</code></td><td><code>$request-&gt;name, request(&#39;name&#39;)</code></td></tr><tr><td><code>return Redirect::back()</code></td><td><code>return back()</code></td></tr><tr><td><code>is_null($object-&gt;relation) ? $object-&gt;relation-&gt;id : null }</code></td><td><code>optional($object-&gt;relation)-&gt;id</code></td></tr><tr><td><code>return view(&#39;index&#39;)-&gt;with(&#39;title&#39;, $title)-&gt;with(&#39;client&#39;, $client)</code></td><td><code>return view(&#39;index&#39;, compact(&#39;title&#39;, &#39;client&#39;))</code></td></tr><tr><td><code>$request-&gt;has(&#39;value&#39;) ? $request-&gt;value : &#39;default&#39;;</code></td><td><code>$request-&gt;get(&#39;value&#39;, &#39;default&#39;)</code></td></tr><tr><td><code>Carbon::now(), Carbon::today()</code></td><td><code>now(), today()</code></td></tr><tr><td><code>App::make(&#39;Class&#39;)</code></td><td><code>app(&#39;Class&#39;)</code></td></tr><tr><td><code>-&gt;where(&#39;column&#39;, &#39;=&#39;, 1)</code></td><td><code>-&gt;where(&#39;column&#39;, 1)</code></td></tr><tr><td><code>-&gt;orderBy(&#39;created_at&#39;, &#39;desc&#39;)</code></td><td><code>-&gt;latest()</code></td></tr><tr><td><code>-&gt;orderBy(&#39;age&#39;, &#39;desc&#39;)</code></td><td><code>-&gt;latest(&#39;age&#39;)</code></td></tr><tr><td><code>-&gt;orderBy(&#39;created_at&#39;, &#39;asc&#39;)</code></td><td><code>-&gt;oldest()</code></td></tr><tr><td><code>-&gt;select(&#39;id&#39;, &#39;name&#39;)-&gt;get()</code></td><td><code>-&gt;get([&#39;id&#39;, &#39;name&#39;])</code></td></tr><tr><td><code>-&gt;first()-&gt;name</code></td><td><code>-&gt;value(&#39;name&#39;)</code></td></tr></tbody></table><h2 id="使用-IoC-容器或-facades-代替新的-Class"><a href="#使用-IoC-容器或-facades-代替新的-Class" class="headerlink" title="使用 IoC 容器或 facades 代替新的 Class"></a>使用 IoC 容器或 <strong>facades</strong> 代替新的 Class</h2><p>新的 Class 语法创建类时，不仅使得类与类之间紧密耦合，还加重了测试的复杂度。推荐改用 IoC 容器或 facades。 </p><p>坏：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>好：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>User <span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="不要直接从-env-文件获取数据"><a href="#不要直接从-env-文件获取数据" class="headerlink" title="不要直接从 .env 文件获取数据"></a>不要直接从 <code>.env</code> 文件获取数据</h2><p>将数据传递给配置文件，然后使用辅助函数 <code>config()</code> 在应用程序中使用数据。</p><p>坏：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$apiKey</span> <span class="token operator">=</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'API_KEY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>好：</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">// config/api.php</span><span class="token string">'key'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'API_KEY'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// Use the data</span><span class="token variable">$apiKey</span> <span class="token operator">=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string">'api.key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="以标准格式存储日期，必要时就使用访问器和修改器来修改日期格式"><a href="#以标准格式存储日期，必要时就使用访问器和修改器来修改日期格式" class="headerlink" title="以标准格式存储日期，必要时就使用访问器和修改器来修改日期格式"></a>以标准格式存储日期，必要时就使用访问器和修改器来修改日期格式</h2><p>坏：</p><pre class=" language-php"><code class="language-php"><span class="token punctuation">{</span><span class="token punctuation">{</span> Carbon<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createFromFormat</span><span class="token punctuation">(</span><span class="token string">'Y-d-m H-i'</span><span class="token punctuation">,</span> <span class="token variable">$object</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ordered_at</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> Carbon<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createFromFormat</span><span class="token punctuation">(</span><span class="token string">'Y-d-m H-i'</span><span class="token punctuation">,</span> <span class="token variable">$object</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ordered_at</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'m-d'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>好：</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">// Model</span><span class="token keyword">protected</span> <span class="token variable">$dates</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ordered_at'</span><span class="token punctuation">,</span> <span class="token string">'created_at'</span><span class="token punctuation">,</span> <span class="token string">'updated_at'</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getMonthDayAttribute</span><span class="token punctuation">(</span><span class="token variable">$date</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$date</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'m-d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// View</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$object</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ordered_at</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$object</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ordered_at</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">monthDay</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="其他良好做法"><a href="#其他良好做法" class="headerlink" title="其他良好做法"></a>其他良好做法</h2><ul><li>千万不要在路由文件中放置任何逻辑。 </li><li>在 Blade 模板中最小化 vanilla PHP 的使用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内外优秀前端 CDN，Google Fonts 国内镜像</title>
      <link href="/uncategorized/you-xiu-qian-duan-cdn-jing-xiang/"/>
      <url>/uncategorized/you-xiu-qian-duan-cdn-jing-xiang/</url>
      
        <content type="html"><![CDATA[<p>CDN要求速度快，项目多，版本更新快，国内<code>BootCDN.cn</code>我觉得是最好的，没有之一，什么新浪，百度，360的都是给内部用的。</p><p>最近发现的<code>CSS.NET</code>也不错啊，还反代了Google字体库，够快，很方便。</p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><h3 id="BootCDN-推荐"><a href="#BootCDN-推荐" class="headerlink" title="BootCDN 推荐"></a>BootCDN 推荐</h3><blockquote><p><a href="https://www.bootcdn.cn" target="_blank" rel="noopener">https://www.bootcdn.cn</a></p></blockquote><h3 id="CSS-NET-强烈推荐"><a href="#CSS-NET-强烈推荐" class="headerlink" title="CSS.NET (强烈推荐)"></a>CSS.NET (强烈推荐)</h3><p>同步国外<code>cdnjs.com</code>，速度够快</p><blockquote><p><a href="https://css.loli.net" target="_blank" rel="noopener">https://css.loli.net</a></p></blockquote><h3 id="CDNJS"><a href="#CDNJS" class="headerlink" title="CDNJS"></a>CDNJS</h3><p>原 <code>cdnjs.cloudflare.com</code></p><blockquote><p><a href="https://cdnjs.com" target="_blank" rel="noopener">https://cdnjs.com</a></p></blockquote><h3 id="JSDELIVR-国外"><a href="#JSDELIVR-国外" class="headerlink" title="JSDELIVR(国外)"></a>JSDELIVR(国外)</h3><blockquote><p><a href="https://www.jsdelivr.com" target="_blank" rel="noopener">https://www.jsdelivr.com</a></p></blockquote><h3 id="UNPKG"><a href="#UNPKG" class="headerlink" title="UNPKG"></a>UNPKG</h3><p>跟npm仓库同步，绝对是最全的，速度不够快</p><blockquote><p><a href="https://unpkg.com" target="_blank" rel="noopener">https://unpkg.com</a></p></blockquote><h2 id="Google-Fonts"><a href="#Google-Fonts" class="headerlink" title="Google Fonts"></a>Google Fonts</h2><h3 id="中科大"><a href="#中科大" class="headerlink" title="中科大"></a>中科大</h3><blockquote><p>主页 <a href="https://lug.ustc.edu.cn/wiki/start" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/start</a></p></blockquote><h3 id="Google其他代理"><a href="#Google其他代理" class="headerlink" title="Google其他代理"></a>Google其他代理</h3><blockquote><ul><li>fonts.gstatic.com -&gt; fonts-gstatic.proxy.ustclug.org</li><li>fonts.googleapis.com -&gt; fonts.proxy.ustclug.org</li><li>ajax.googleapis.com -&gt; ajax.proxy.ustclug.org</li></ul></blockquote><h3 id="其它反向代理"><a href="#其它反向代理" class="headerlink" title="其它反向代理"></a>其它反向代理</h3><blockquote><ul><li>registry-1.docker.io            -&gt;    docker.mirrors.ustc.edu.cn</li><li>packages.elastic.co             -&gt;    elastic.proxy.ustclug.org</li><li>ppa.launchpad.net               -&gt;    launchpad.proxy.ustclug.org</li><li>archive.cloudera.com/cdh5/      -&gt;    cloudera.proxy.ustclug.org/cdh5/</li><li>downloads.lede-project.org      -&gt;    lede.proxy.ustclug.org</li><li>downloads.openwrt.org           -&gt;    openwrt.proxy.ustclug.org</li><li>registry.npmjs.org              -&gt;    npmreg.proxy.ustclug.org</li><li><a href="http://www.npmjs.com" target="_blank" rel="noopener">www.npmjs.com</a>                  -&gt;    npm.proxy.ustclug.org</li><li>themes.googleusercontent.com    -&gt;    google-themes.proxy.ustclug.org</li><li>secure.gravatar.com             -&gt;    gravatar.proxy.ustclug.org</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> CDN </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL规范数据库</title>
      <link href="/mysql/mysql-gui-fan-shu-ju-ku/"/>
      <url>/mysql/mysql-gui-fan-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li><p><strong>对象名称必须使用小写，多单词统一使用下划线分割</strong></p></li><li><p><strong>命名的单词必须做到顾名思义、简洁，表名长度不要超过16个字符，字段名称长度不要超过32个字符</strong></p></li><li><p><strong>禁止使用保留字并且尽量少用含有关键词来命名</strong></p></li><li><p><strong>临时表必须以<code>tmp_</code>开头、以日期结尾，备份表必须以<code>bak_</code>开头、以日期结尾</strong></p></li></ul><h2 id="基础规范"><a href="#基础规范" class="headerlink" title="基础规范"></a>基础规范</h2><ul><li><p><strong>尽可能地使用<code>InnoDB</code>作为表的存储引擎</strong></p><p>在<code>MySQL 5.6</code>以后，<code>InnoDB</code>被设置成默认的存储引擎，支持事务和行级锁。</p></li><li><p><strong>数据库和数据表统一使用<code>UTF8MB4</code>字符编码</strong></p><p><code>UTF8MB4</code>字符编码支持中文储存以及表情存储，兼容性杠杠的。</p></li><li><p><strong>所有的表和字段必须添加注释</strong></p><p>这个是好习惯的问题，即使做到了顾名思义，以防万一哪天健忘或理解错误，同时给后人留下后路，提高维护性。使用<code>comment</code>设定注释。</p></li><li><p><strong>尽量控制表行数在500万以内</strong></p><p>数据量越多，则查询的效率越低，同时会导致长时间占用高内存以及磁盘<code>IO</code>过高。数据量膨大建议采用分表、合理分区等方案。</p></li><li><p><strong>尽可能采用冷热数据分离策略</strong></p><p>在<code>MySQL</code>中，数据表列数最大限制为<code>4096</code>列 ，每条元祖数据总和大小不能超过<code>65535</code>字节，常用的字段与基本不常用的字段、细分不同业务的数据分开表设计存储，减小表宽度，保证热数据的内存缓存命中率，降低<code>CPU</code>使用率以及降低<code>IO</code>流。</p></li><li><p><strong>禁止以图片、文件等二进制数据</strong></p><p><code>MySQL</code>虽然支持对文件对象的存储，但是开发人员是不允许、不推荐这样做的。文件通常是很大的，转成二进制数据将是一串很长的字符串，无疑占用数据库很大的存储空间，在数据库读写更是消耗内存和占用大量的<code>IO</code>流，最终导致查询的效率低下。一般文件是存放于文件服务器，将文件服务器的路径存储于数据库中。</p></li></ul><h2 id="行为与流程规范"><a href="#行为与流程规范" class="headerlink" title="行为与流程规范"></a>行为与流程规范</h2><ul><li><p><strong>禁止在线上做数据库的压力测试</strong></p></li><li><p><strong>对应的环境使用对应的数据库比如测试环境一定要使用测试环境的数据库</strong></p></li><li><p><strong><code>super</code>权限只能属于<code>DBA</code>，不能赋予项目程序</strong></p></li><li><p><strong>养成查看<code>SQL</code>运行性能的习惯，可以借用性能分析工具</strong></p><p>譬如：<code>EXPLAIN</code>语句 | <code>showprofile</code> | <code>mySQLsla</code>等。</p></li><li><p><strong>禁止在业务高峰期批量更新、查询数据</strong></p><p>可以在流量比较低的凌晨跑批操作。</p></li><li><p><strong>活动推广、系统上线以及平台上新务必对流量进行评估</strong></p><p>防患于未然、否则可能造成数据库服务器流量瓶颈进而导致影响业务。</p></li><li><p><strong>所有建表前都要确定字段的类型、长度以及索引方可建表</strong></p><p>确保表结构设计为最优是前期数据库最大的优化</p></li><li><p><strong>所有对表的结构、数据的修改务必经过<code>DBA</code>的审阅和同意</strong></p></li></ul><h2 id="表设计规范"><a href="#表设计规范" class="headerlink" title="表设计规范"></a>表设计规范</h2><ul><li><p><strong>尽可能每张表的索引数量控制在5个以内</strong></p><p>索引具有提高查询的效率的好处也有降低写操作效率的坏处，甚至会降低查询到的效率。同时索引也是占用内存空间的，因而应该合理控制索引的数量。</p></li><li><p><strong>每一张<code>InnoDB</code>表都必须含有一个主键</strong></p><p>InnoDB 是一种索引组织表：数据的存储的逻辑顺序和索引的顺序是相同的。每个表都可以有多个索引，但是表的存储顺序只能有一种 InnoDB是按照主键索引的顺序来组织表的。不要使用可能会更新的列作为主键，同时尽量不要使用<code>UUID</code>、<code>MD5</code>、<code>HASH</code>等无序的字符串作为主键。在没有特别的情况下，要使用自增的整型或发号器作为主键。</p></li><li><p><strong>尽可能避免使用外键约束</strong></p><p>外键可以保证数据的准确性、参照完整性，每次进行写操作时都会走校验数据知否正确的流程，将会有损写操作的性能，数据的参照完整性建议在业务层实现。倘若字表的写操作很少的情况下务必使用外键约束。</p></li><li><p><strong>设置数据表架构应考虑后期扩展型</strong></p><p>体验产品和架构师的交流和能力、对业务的熟悉度。</p></li><li><p><strong>遵循范式与冗余平衡原则</strong></p><blockquote><p>第一范式：具有原子性</p><p>第二范式：主键列与非主键列遵循完全函数依赖关系</p><p>第三范式：非主键列之间没有传递函数依赖关系</p></blockquote><p>合理的原则能够体验出数据库的可操作性、稳定性以及性能<code>nice</code>。范式设计是数据结构的一种思想，但是我们应当灵活使用，一味追求三范式无疑会影响程序的性能，适当的冗余是可以提高查询的效率的，前提要保证是主键的冗余。</p></li><li><p><strong>控制每张表的字段在20以内，否则业务分表</strong></p><p>数据表的宽度与内存占用的大小成正比，在进行读写操作时，数据库程序将表结构与数据载入内存，当表宽度越长消耗的内存越多、越占<code>IO</code>流，导致操作的效率下降。将可能将字段按照业务细分、冷热的条件进行分表设计。</p></li></ul><h2 id="字段设计规范"><a href="#字段设计规范" class="headerlink" title="字段设计规范"></a>字段设计规范</h2><ul><li><p><strong>尽可能不要在表中建立顾名思义的扩展字段</strong></p><p>比如<code>ext</code>、<code>ext_1</code>、<code>extend_n</code>，时间一长，好几个这样的字段，即使每一个都有<code>comment</code>，也会造成<code>SQL</code>的可读性，特别是在构建<code>SQL</code>语句的时候。</p></li><li><p><strong>优先设置占存储空间最小的类型和长度</strong></p><p>合理设置字段的类型和长度，可以节省<code>MySQL</code>的表空间，是性能优化的姿势之一。同时，索引列定义空间越大也会导致建立索引的所需空间也越大。应当严禁定义字段，譬如</p><blockquote><p><code>IP</code>应使用<code>UNSUGNED</code>或者<code>INT</code>结构类型，在PHP中可以使用<code>long2ip</code>与<code>ip2long</code>函数进行互转</p><p>性别应使用<code>CHAR(1)</code>，即定长的字符串类型</p><p>… …</p></blockquote></li><li><p><strong>尽可能避免使用<code>TEXT</code>、<code>BLOB</code>、<code>ENUM</code>数据类型</strong></p><p>MySQL 内存临时表不支持<code>TEXT</code>、<code>BLOB</code>这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使用磁盘临时表进行，毋庸置疑会降低查询的效率。<code>MySQL</code>对索引字段长度是有限制的，<code>TEXT</code>或<code>BLOB</code>类型只能使用前缀索引。</p></li><li><p><strong>避免<code>ENUM</code>数据类型</strong></p><p>在<code>MySQL</code>中，存储枚举类型的数据在库中，字段列中保存的值实际为整数，特别容易导致开发者混乱，同时在查询使用排序是基于数值整型的，虽然可以使用<code>ORDER BY FIELD()</code>,但是会导致索引失效，尽量避免这么做。</p></li><li><p><strong>尽可能将所有的数据列定义为<code>NOT NULL</code>类型</strong></p><p><code>NULL</code>列比较特殊，需要额外的空间来保存，同时会造成索引失效。</p></li><li><p><strong>使用<code>TIMESTAMP</code>与<code>INT</code>替换<code>DATETIME</code>存储时间</strong></p><p>很明显，<code>TIMESTAMP</code>与<code>INT</code>占4位字节，而<code>DATETIME</code>占8位字节。那么存储时间应该如何选择<code>TIMESTAMP</code>与<code>INT</code>呢？<code>TIMESTAMP</code>的可读性高而<code>INT</code>的灵活性高，因而经常需要使用计算操作的应当使用<code>INT</code>存储，否则使用<code>TIMESTAMP</code>。</p></li><li><p><strong>金额相关的数据必须使用<code>DECIMAL</code>数据类型</strong></p><p>谈到钱这个东西呢，精确是非常重要的，即便要浪费存储空间、笑?~<code>DECIMAL</code> 类型为精准浮点数，在计算时不会丢失精度，可以自定义其长度，可用于存储比 bigint 更大的整型数据。</p></li><li><p><strong>表与表关联的键名保持一致或以关联表名的缩写为前缀</strong></p><p>规范事项，保持规范、养成习惯，提高程序的可读性。</p></li><li><p><strong>固定长度的字符串字段务必使用<code>CHAR</code></strong></p><p>节省存空间、降低内存使用率、提高读写性能。</p></li><li><p><strong>使用<code>UNSIGNEG</code>存储非负整数</strong></p><p>节省存空间、降低内存使用率、提高读写性能。</p></li><li><p><strong>禁止敏感数据以明文形式存储</strong></p><p>确保信息的安全性，比如密码、隐秘数据等。</p></li></ul><h2 id="索引规范"><a href="#索引规范" class="headerlink" title="索引规范"></a>索引规范</h2><ul><li><p><strong>重要的<code>SQL</code>语句必须带上索引作为条件</strong></p></li><li><p><strong>避免冗余和重复索引</strong></p><blockquote><p><strong>重复索引：</strong> 在相同的列上按照相同的顺序创建的相同类型的索引。</p><p><strong>冗余索引：</strong> 两个索引按照相同的顺序覆盖了相同的列。</p></blockquote><p>在一张用户表里面，将用户<code>id</code>设置成主键的同时再设置成唯一索引，那就是重复索引，如果创建了索引(<code>a</code>,<code>b</code>)，再设置<code>a</code>索引，则a为冗余索引，这两种错误的操作都会降低读写的性能。</p></li><li><p><strong>务必不要在作为查询条件很少、或者没有关联的字段下建立索引</strong></p><p>索引本身占用存储空间，过多设置会导致查询效率降低。比如在成绩表中将分数设置为索引，这是一种错误的做法。</p></li><li><p><strong>禁止在索引列进行数学运算和函数运算</strong></p><p><code>MySQL</code>不擅长于运算，需要计算的应该移至代码业务层。总而言之，凡是计算都要移至代码业务层(<code>MySQL</code>不擅长于运算)。</p></li><li><p><strong>符合索引将区分度高的置前</strong></p><p>将区分度高的索引置前可以缩短查询的范围，以至提高查询的效率，特别是在<code>JOIN</code>连表查询，提高效率特别明显。</p></li></ul><h2 id="SQL使用规范"><a href="#SQL使用规范" class="headerlink" title="SQL使用规范"></a>SQL使用规范</h2><ul><li><p><strong>危险的<code>SQL</code>语句必须带上索引作为条件，谨记谨记</strong></p><p>哪些是危险的<code>SQL</code>语句呢，删、改皆为危险的语句，一定要记住带上<code>WHERE</code>。</p></li><li><p><strong>建议使用预编译语句操作数据库</strong></p><p>先简单了解下<code>SQL</code>执行的流程，<code>SQL</code>先解析、预编译处理再生成执行计划，最后调用引擎的<code>api</code>方法返回执行的结果，使用预编译的操作姿势，在读写的时候可以省去预编译的时间，终而提高执行效率。</p></li><li><p><strong>严禁使用<code>SELECT *</code>查询字段</strong></p><p>要什么<code>SELECT</code>什么，不能多，否则可能导致覆盖索引失效，消耗更多的 <code>CPU</code> 和 <code>IO</code> 以网络带宽资源。</p></li><li><p><strong>查询语句务必带上索引以提高查询效率</strong></p></li><li><p><strong>必须避免数据类型隐式转换</strong></p><p>在<code>MySQL</code>中，数据会存在隐式转换，当该字段发生转换时，索引会造成失效。</p></li><li><p><strong>充分利用利用索引优势</strong></p><p>既然设置了索引就好好充分利用好索引，将查询的效率提至最高。</p></li><li><p><strong>禁止使用相同的账号跨库操作</strong></p><p>各执其职，互不越权。</p></li><li><p><strong>禁止使用带有数据值却不带有字段键名的<code>INSERT</code>操作</strong></p><p>这是一种错误的做法，对于表的改动后会造成比较大的影响。</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES ('alicfeng',23);# 应该这样操作INSERT INTO user (`username`,`age`) VALUES ('alicfeng',23);</code></pre></li><li><p><strong>尽可能使用<code>JOIN</code>替代子查询操作</strong></p><p>子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。 特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。 由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 <code>CPU</code> 和 <code>IO</code> 资源，产生大量的慢查询。</p></li><li><p><strong>尽可能避免使用<code>JOIN</code>关联过多的表</strong></p><p>一般情况下，建议<code>JOIN</code>的表不要超过5个，<code>JOIN</code>多表查询比较耗时时间，关联的表越多越耗时间，防止执行超时或死锁。</p></li><li><p><strong>合并操作、减少数据库的交互</strong></p><p>可以灵活地合并 <code>SQL</code> 操作，降低<code>IO</code>消耗的同时也提高了执行效率，譬如</p><pre class=" language-mysql"><code class="language-mysql">UPDATE user SET username='alicfeng' FROM id=1995;UPDATE user SET age=23 FROM id=1995;# 合并操作成一条SQLUPDATE user SET username='alicfeng',age=23 FROM id=1995;</code></pre></li><li><p><strong>尽可能使用<code>IN</code>代替<code>OR</code>语句</strong></p></li><li><p><strong>禁止使用<code>ORDER BY RAND()</code>随机排序语句</strong></p><p>会把表中所有符合条件的数据装载到内存中，然后在内存中对所有数据根据随机生成的值进行排序，并且可能会对每一行都生成一个随机值，如果满足条件的数据集非常大，就会消耗大量的 <code>CPU</code> 和 <code>IO</code> 及内存资源。</p></li><li><p><strong>禁止在<code>WHERE</code>语句中进行计算</strong></p><p>对列进行函数转换或计算时会导致无法使用索引。</p><pre class=" language-mysql"><code class="language-mysql"># 索引会失效WHERE DATE(create_date)='20190308';# 灵活使用[推荐]WHERE create_date>='20190308' AND create_date<'20190309';</code></pre></li><li><p><strong>使用<code>UNION ALL</code>而不是使用<code>UNION</code></strong></p><p>在已知数据没有重复或无须删除重复行的前提下，因为<code>UNION</code>需要重复值扫描，降低效率。</p></li><li><p><strong>大批量写操作尽可能合理地分批次处理</strong></p><p>大批量的操作应当合理平均分批次处理，防止死锁影响业务，同时尽量将跑批这种大操作至于凌晨操作。</p></li><li><p><strong>不在数据库做运算，务必将运算置于业务层</strong></p><p><code>MySQL</code>不擅长数学运算和逻辑判断。</p></li><li><p><strong>禁止使用索引做运算</strong></p><p>索引会失效。</p></li><li><p><strong><code>SQL</code>语句简单化</strong></p></li><li><p><strong>使用事务尽量简单化，同时控制事务执行的时间</strong></p><p>时间长会导致长时间锁表，造成死锁，进而影响业务。</p></li><li><p><strong><code>IN</code>语句参数的个数尽量控制在1000以内</strong></p></li><li><p><strong>注意<code>LIMIT</code>分页查询效率，<code>LIMIT</code>越大效率越低</strong></p><p>在使用<code>LIMIT</code>做分页时，更改巧妙地处理查询，譬如使用<code>S1</code>替换成<code>S2</code>，将有效地提高查询的效率。</p><pre class=" language-mysql"><code class="language-mysql"># S1SELECT `username` FROM `user` LIMIT 10000,20;# S2SELECT `username` FROM `user` WHERE id>10000 LIMIT 20;</code></pre></li><li><p><strong>编写<code>SQL</code>语句必须全部为大写，每个词必只允许只有一个空格符</strong></p><p>编写规范，必须统一并遵循。</p></li><li><p><strong>尽可能使用<code>EXIST|NOT EXIST</code>替代<code>IN | NOT IN</code></strong></p></li><li><p><strong>禁止使用<code>LIKE</code>添加<code>%</code>前缀进行模糊查询</strong></p><p><code>%</code>前置会导致索引失效</p></li><li><p><strong>禁止一条语句同时对多个表进行写操作</strong></p></li></ul><p>参考<a href="https://learnku.com/users/32535" target="_blank" rel="noopener">A_aliane</a>、<a href="https://www.cnblogs.com/zzsdream/p/6652923.html" target="_blank" rel="noopener">雪松</a>等前辈的总结，非常感谢！</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 9 个不经常用的小技巧</title>
      <link href="/laravel/laravel9-ge-bu-jing-chang-yong-de-xiao-ji-qiao/"/>
      <url>/laravel/laravel9-ge-bu-jing-chang-yong-de-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h3 id="更新父表的-timestamps"><a href="#更新父表的-timestamps" class="headerlink" title="更新父表的 timestamps"></a>更新父表的 <code>timestamps</code></h3><p>如果你想在更新关联表的同时，更新父表的<code>timestamps</code>，你只需要在关联表的<code>model</code>中添加<code>touches</code>属性。<br>比如我们有<code>Post</code>和<code>Comment</code>两个关联模型</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Eloquent<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 要更新的所有关联表     ** @var array     */</span>     <span class="token keyword">protected</span> <span class="token variable">$touches</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * Get the post that the comment belongs to.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token string">'App\Post'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="懒加载指定字段"><a href="#懒加载指定字段" class="headerlink" title="懒加载指定字段"></a>懒加载指定字段</h3><pre class=" language-php"><code class="language-php"><span class="token variable">$posts</span> <span class="token operator">=</span> App\<span class="token package">Post</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">'comment:id,name'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="跳转指定控制器并附带参数"><a href="#跳转指定控制器并附带参数" class="headerlink" title="跳转指定控制器并附带参数"></a>跳转指定控制器并附带参数</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">return</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">action</span><span class="token punctuation">(</span><span class="token string">'SomeController@method'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'param'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="关联时使用-withDefault"><a href="#关联时使用-withDefault" class="headerlink" title="关联时使用 withDefault()"></a>关联时使用 <code>withDefault()</code></h3><p>在调用关联时，如果另一个模型不存在，系统会抛出一个致命错误，例如 <code>$comment-&gt;post-&gt;title</code>，那么我们就需要使用<code>withDefault()</code></p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">belongsTo</span><span class="token punctuation">(</span>App\<span class="token package">Post</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">withDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="两层循环中使用-loop"><a href="#两层循环中使用-loop" class="headerlink" title="两层循环中使用 $loop"></a>两层循环中使用 <code>$loop</code></h3><p>在<code>blade</code>的<code>foreach</code>中，如果你想获取外层循环的变量</p><pre class=" language-blade"><code class="language-blade">@foreach ($users as $user)     @foreach ($user->posts as $post)        @if ($loop->parent->first)            This is first iteration of the parent loop.        @endif    @endforeach@endforeach</code></pre><h3 id="浏览邮件而不发送"><a href="#浏览邮件而不发送" class="headerlink" title="浏览邮件而不发送"></a>浏览邮件而不发送</h3><p>如果你使用的是<code>mailables</code>来发送邮件，你可以只展示而不发送邮件</p><pre class=" language-php"><code class="language-php">Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/mailable'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$invoice</span> <span class="token operator">=</span> App\<span class="token package">Invoice</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">App<span class="token punctuation">\</span>Mail<span class="token punctuation">\</span>InvoicePaid</span><span class="token punctuation">(</span><span class="token variable">$invoice</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="通过关联查询记录"><a href="#通过关联查询记录" class="headerlink" title="通过关联查询记录"></a>通过关联查询记录</h3><p>在<code>hasMany</code>关联关系中，你可以查询出关联记录必须大于5的记录</p><pre class=" language-php"><code class="language-php"><span class="token variable">$posts</span> <span class="token operator">=</span> Post<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'comment'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h3><p>查看包含软删除的记录</p><pre class=" language-php"><code class="language-php"><span class="token variable">$posts</span> <span class="token operator">=</span> Post<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">withTrashed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查看仅被软删除的记录</p><pre class=" language-php"><code class="language-php"><span class="token variable">$posts</span> <span class="token operator">=</span> Post<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">onlyTrashed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>恢复软删除的模型</p><pre class=" language-php"><code class="language-php">Post<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">withTrashed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Eloquent-时间方法"><a href="#Eloquent-时间方法" class="headerlink" title="Eloquent 时间方法"></a>Eloquent 时间方法</h3><ul><li>whereDate 日期</li><li>whereMonth 月份</li><li>whereDay 日</li><li>whereYear 年份</li><li>whereTime 时间</li></ul><blockquote><p>这个方法是调用Mysql内部函数，可能对比<code>between</code>、<code>and</code> 更耗时</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token variable">$posts</span> <span class="token operator">=</span> Post<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">whereDate</span><span class="token punctuation">(</span><span class="token string">'created_at'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-31'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$posts</span> <span class="token operator">=</span> Post<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">whereMonth</span><span class="token punctuation">(</span><span class="token string">'created_at'</span><span class="token punctuation">,</span> <span class="token string">'12'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$posts</span> <span class="token operator">=</span> Post<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">whereDay</span><span class="token punctuation">(</span><span class="token string">'created_at'</span><span class="token punctuation">,</span> <span class="token string">'31'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$posts</span> <span class="token operator">=</span> Post<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">whereYear</span><span class="token punctuation">(</span><span class="token string">'created_at'</span><span class="token punctuation">,</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$posts</span> <span class="token operator">=</span> Post<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">whereTime</span><span class="token punctuation">(</span><span class="token string">'created_at'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">'14:13:58'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十个推荐使用的Laravel的辅助函数</title>
      <link href="/laravel/shi-ge-tui-jian-shi-yong-de-laravel-de-fu-zhu-han-shu/"/>
      <url>/laravel/shi-ge-tui-jian-shi-yong-de-laravel-de-fu-zhu-han-shu/</url>
      
        <content type="html"><![CDATA[<p>Laravel 包含各种全局辅助函数。 laravel 中包含大量辅助函数，您可以使用它们来简化开发工作流程。 在这里，我将编写10个最好的 laravel 帮助函数，用于使我的开发更容易。 您必须考虑在必要时使用它们。</p><p>您还可以查看Laravel文档 <a href="https://learnku.com/docs/laravel/5.8/helpers/3919" target="_blank" rel="noopener">辅助函数</a>.</p><h2 id="array-dot"><a href="#array-dot" class="headerlink" title="array_dot()"></a>array_dot()</h2><p><code>array_dot()</code> array_dot() 辅助函数允许你将多维数组转换为使用点符号的一维数组。</p><pre><code>$array = [    &#39;user&#39; =&gt; [&#39;username&#39; =&gt; &#39;something&#39;],    &#39;app&#39; =&gt; [&#39;creator&#39; =&gt; [&#39;name&#39; =&gt; &#39;someone&#39;], &#39;created&#39; =&gt; &#39;today&#39;]];$dot_array = array_dot($array);// [user.username] =&gt; something, [app.creator.name] =&gt; someone, [app.created] =&gt; today</code></pre><h2 id="array-get"><a href="#array-get" class="headerlink" title="array_get()"></a>array_get()</h2><p><code>array_get()</code> 函数使用点符号从多维数组中检索值。</p><pre><code>$array = [    &#39;user&#39; =&gt; [&#39;username&#39; =&gt; &#39;something&#39;],    &#39;app&#39; =&gt; [&#39;creator&#39; =&gt; [&#39;name&#39; =&gt; &#39;someone&#39;], &#39;created&#39; =&gt; &#39;today&#39;]];$name = array_get($array, &#39;app.creator.name&#39;);// someone</code></pre><p>如果key不存在，<code>array_get()</code> 函数还接受可选的第三个参数作为默认值。</p><pre><code>$name = array_get($array, &#39;app.created.name&#39;, &#39;anonymous&#39;);// anonymous</code></pre><h2 id="public-path"><a href="#public-path" class="headerlink" title="public_path()"></a>public_path()</h2><p><code>public_path()</code> 返回 Laravel 应用程序中公共目录的完全限定的绝对路径。 你还可以将路径传递到公共目录中的文件或目录以获取该资源的绝对路径。 它将简单地将<code>public_path()</code> 添加到你的参数中。</p><pre><code>$public_path = public_path();$path = public_path(&#39;js/app.js&#39;);</code></pre><h2 id="Str-orderedUuid"><a href="#Str-orderedUuid" class="headerlink" title="Str::orderedUuid()"></a>Str::orderedUuid()</h2><p><code>Str::orderedUuid()</code> 函数首先生成一个时间戳uuid。 这个uuid可以存储在索引数据库列中。 这些uuid是基于时间戳创建的，因此它们会保留你的内容索引。 在Laravel 5.6中使用它时，会引发 <code>Ramsey\Uuid\Exception\UnsatisfiedDependencyException</code>。 要解决此问题，只需运行以下命令即可使用 <code>moontoast/math</code> 包：:</p><pre><code>composer require &quot;moontoast/math&quot;</code></pre><pre><code>use Illuminate\Support\Str;return (string) Str::orderByUuid()// A timestamp first uuid</code></pre><h2 id="str-plural"><a href="#str-plural" class="headerlink" title="str_plural()"></a>str_plural()</h2><p><code>str_plural</code> 函数将字符串转换为复数形式。该功能只支持英文。</p><pre><code>echo str_plural(&#39;bank&#39;);// banksecho str_plural(&#39;developer&#39;);// developers</code></pre><h2 id="route"><a href="#route" class="headerlink" title="route()"></a>route()</h2><p><code>route()</code> 函数为指定的路由生成路由URL。</p><pre><code>$url = route(&#39;login&#39;);</code></pre><p>如果路由接受参数，你可以简单地将它们作为第二个参数传递给一个数组。</p><pre><code>$url = route(&#39;products&#39;, [&#39;id&#39; =&gt; 1]);</code></pre><p>如果你想产生一个相对的URL而不是一个绝对的URL，你可以传递<code>false</code>作为第三个参数。</p><pre><code>$url = route(&#39;products&#39;, [&#39;id&#39; =&gt; 1], false);</code></pre><h2 id="tap"><a href="#tap" class="headerlink" title="tap()"></a>tap()</h2><p><code>tap()</code> 函数接受两个参数：一个值和一个闭包。该值将被传递给闭包，然后该值将被返回。闭包返回值无关紧要。</p><pre><code>$user = App\User::find(1);return tap($user, function($user) {    $user-&gt;update([        &#39;name&#39; =&gt; &#39;Random&#39;    ]);});</code></pre><p>它不会返回布尔值，而是返回 <code>User Model</code> 。</p><p>如果你没有传递闭包，你也可以使用 <code>User Model</code> 的任何方法。 无论实际返回的方法如何，返回值都将始终为值。 在下面的例子中，它将返回 <code>User Model</code> 而不是布尔值。 <code>update</code>方法返回布尔值，但由于用了 <code>tap</code> ，所以它将返回 <code>User Model</code>。</p><pre><code>$user = App\User::find(1);return tap($user)-&gt;update([    &#39;name&#39; =&gt; &#39;SomeName&#39;]);</code></pre><h2 id="dump"><a href="#dump" class="headerlink" title="dump()"></a>dump()</h2><p><code>dump()</code> 函数会dump给定的变量，同时也支持同时传入多个变量。这对调试非常有用。</p><pre><code>dump($var1);dump($var1, $var2, $var3);</code></pre><h2 id="str-slug"><a href="#str-slug" class="headerlink" title="str_slug()"></a>str_slug()</h2><p><code>str_slug()</code> 函数将给定的字符串生成一个 URL 友好的 slug。 你可以使用此功能为帖子或产品标题创建一个 slug。</p><pre><code>$slug = str_slug(&#39;Helpers in Laravel&#39;, &#39;-&#39;);// helpers-in-laravel</code></pre><h2 id="optional"><a href="#optional" class="headerlink" title="optional()"></a>optional()</h2><p> <code>optional()</code> 函数接受一个参数，你可以调用参数的方法或访问属性。 如果传递的对象为null，则方法和属性将返回null，而不是导致错误或抛出异常。</p><pre><code>$user = User::find(1);return optional($user)-&gt;name;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL最佳实践-如何索引JSON字段</title>
      <link href="/mysql/mysql-zui-jia-shi-jian-ru-he-suo-yin-json-zi-duan/"/>
      <url>/mysql/mysql-zui-jia-shi-jian-ru-he-suo-yin-json-zi-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>MySQL从5.7.8起开始支持JSON字段，这极大的丰富了MySQL的数据类型。也方便了广大开发人员。但MySQL并没有提供对JSON对象中的字段进行索引的功能，至少没有直接对其字段进行索引的方法。本文将介绍利用MySQL 5.7中的虚拟字段的功能来对JSON对象中的字段进行索引。</p><h2 id="示例数据"><a href="#示例数据" class="headerlink" title="示例数据"></a>示例数据</h2><p>我们将基于下面的JSON对象进行演示</p><pre class=" language-JSON"><code class="language-JSON">{    "id": 1,      "name": "Sally",      "games_played":{           "Battlefield": {          "weapon": "sniper rifle",          "rank": "Sergeant V",          "level": 20        },                                                                                                                                 "Crazy Tennis": {          "won": 4,          "lost": 1        },         "Puzzler": {          "time": 7        }     } }</code></pre><p>表的基本结构</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `players` (      `id` INT UNSIGNED NOT NULL,    `player_and_games` JSON NOT NULL,    PRIMARY KEY (`id`));</code></pre><p>如果只是基于上面的表的结构我们是无法对JSON字段中的Key进行索引的。接下来我们演示如何借助虚拟字段对其进行索引</p><h2 id="增加虚拟字段"><a href="#增加虚拟字段" class="headerlink" title="增加虚拟字段"></a>增加虚拟字段</h2><p>虚拟列语法如下</p><pre><code>&lt;type&gt; [ GENERATED ALWAYS ] AS ( &lt;expression&gt; ) [ VIRTUAL|STORED ][ UNIQUE [KEY] ] [ [PRIMARY] KEY ] [ NOT NULL ] [ COMMENT &lt;text&gt; ]</code></pre><p>在MySQL 5.7中，支持两种<code>Generated Column</code>，即<code>Virtual Generated Column</code>和<code>Stored Generated Column</code>，前者只将Generated Column保存在数据字典中（表的元数据），并不会将这一列数据持久化到磁盘上；后者会将Generated Column持久化到磁盘上，而不是每次读取的时候计算所得。很明显，后者存放了可以通过已有数据计算而得的数据，需要更多的磁盘空间，与Virtual Column相比并没有优势，因此，MySQL 5.7中，不指定Generated Column的类型，默认是Virtual Column。</p><blockquote><p>如果需要Stored Generated Golumn的话，可能在Virtual Generated Column上建立索引更加合适，一般情况下，都使用Virtual Generated Column，这也是MySQL默认的方式</p></blockquote><p>加完虚拟列的建表语句如下：</p><pre><code>CREATE TABLE `players` (     `id` INT UNSIGNED NOT NULL,   `player_and_games` JSON NOT NULL,   `names_virtual` VARCHAR(20) GENERATED ALWAYS AS (`player_and_games` -&gt;&gt; &#39;$.name&#39;) NOT NULL,    PRIMARY KEY (`id`));</code></pre><blockquote><p>Note: 利用操作符-» 来引用JSON字段中的KEY。在本例中字段names_virtual为虚拟字段，我把它定义成不可以为空。在实际的工作中，一定要集合具体的情况来定。因为JSON本身是一种弱结构的数据对象。也就是说的它的结构不是固定不变的。</p></blockquote><p>我们插入数据</p><pre><code>INSERT INTO `players` (`id`, `player_and_games`) VALUES (1, &#39;{      &quot;id&quot;: 1,      &quot;name&quot;: &quot;Sally&quot;,    &quot;games_played&quot;:{           &quot;Battlefield&quot;: {          &quot;weapon&quot;: &quot;sniper rifle&quot;,          &quot;rank&quot;: &quot;Sergeant V&quot;,          &quot;level&quot;: 20        },                                                                                                                                 &quot;Crazy Tennis&quot;: {          &quot;won&quot;: 4,          &quot;lost&quot;: 1        },         &quot;Puzzler&quot;: {          &quot;time&quot;: 7        }      }   }&#39;);</code></pre><p>查看表里的数据</p><pre><code>SELECT * FROM `players`;+----+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+| id | player_and_games                                                                                                                                                                                           | names_virtual |+----+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+|  1 | {&quot;id&quot;: 1, &quot;name&quot;: &quot;Sally&quot;, &quot;games_played&quot;: {&quot;Puzzler&quot;: {&quot;time&quot;: 7}, &quot;Battlefield&quot;: {&quot;rank&quot;: &quot;Sergeant V&quot;, &quot;level&quot;: 20, &quot;weapon&quot;: &quot;sniper rifle&quot;}, &quot;Crazy Tennis&quot;: {&quot;won&quot;: 4, &quot;lost&quot;: 1}}}                  | Sally         ||  2 | {&quot;id&quot;: 2, &quot;name&quot;: &quot;Thom&quot;, &quot;games_played&quot;: {&quot;Puzzler&quot;: {&quot;time&quot;: 25}, &quot;Battlefield&quot;: {&quot;rank&quot;: &quot;Major General VIII&quot;, &quot;level&quot;: 127, &quot;weapon&quot;: &quot;carbine&quot;}, &quot;Crazy Tennis&quot;: {&quot;won&quot;: 10, &quot;lost&quot;: 30}}}            | Thom          ||  3 | {&quot;id&quot;: 3, &quot;name&quot;: &quot;Ali&quot;, &quot;games_played&quot;: {&quot;Puzzler&quot;: {&quot;time&quot;: 12}, &quot;Battlefield&quot;: {&quot;rank&quot;: &quot;First Sergeant II&quot;, &quot;level&quot;: 37, &quot;weapon&quot;: &quot;machine gun&quot;}, &quot;Crazy Tennis&quot;: {&quot;won&quot;: 30, &quot;lost&quot;: 21}}}           | Ali           ||  4 | {&quot;id&quot;: 4, &quot;name&quot;: &quot;Alfred&quot;, &quot;games_played&quot;: {&quot;Puzzler&quot;: {&quot;time&quot;: 10}, &quot;Battlefield&quot;: {&quot;rank&quot;: &quot;Chief Warrant Officer Five III&quot;, &quot;level&quot;: 73, &quot;weapon&quot;: &quot;pistol&quot;}, &quot;Crazy Tennis&quot;: {&quot;won&quot;: 47, &quot;lost&quot;: 2}}} | Alfred        ||  5 | {&quot;id&quot;: 5, &quot;name&quot;: &quot;Phil&quot;, &quot;games_played&quot;: {&quot;Puzzler&quot;: {&quot;time&quot;: 7}, &quot;Battlefield&quot;: {&quot;rank&quot;: &quot;Lt. Colonel III&quot;, &quot;level&quot;: 98, &quot;weapon&quot;: &quot;assault rifle&quot;}, &quot;Crazy Tennis&quot;: {&quot;won&quot;: 130, &quot;lost&quot;: 75}}}          | Phil          ||  6 | {&quot;id&quot;: 6, &quot;name&quot;: &quot;Henry&quot;, &quot;games_played&quot;: {&quot;Puzzler&quot;: {&quot;time&quot;: 17}, &quot;Battlefield&quot;: {&quot;rank&quot;: &quot;Captain II&quot;, &quot;level&quot;: 87, &quot;weapon&quot;: &quot;assault rifle&quot;}, &quot;Crazy Tennis&quot;: {&quot;won&quot;: 68, &quot;lost&quot;: 149}}}             | Henry         |+----+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+</code></pre><p>查看表<code>Players</code>的字段</p><pre><code>SHOW COLUMNS FROM `players`;+------------------+------------------+------+-----+---------+-------------------+| Field            | Type             | Null | Key | Default | Extra             |+------------------+------------------+------+-----+---------+-------------------+| id               | int(10) unsigned | NO   | PRI | NULL    |                   || player_and_games | json             | NO   |     | NULL    |                   || names_virtual    | varchar(20)      | NO   |     | NULL    | VIRTUAL GENERATED |+------------------+------------------+------+-----+---------+-------------------+</code></pre><p>我们看到虚拟字段<code>names_virtual</code>的类型是<code>VIRTUAL GENERATED</code>。MySQL只是在数据字典里保存该字段元数据，并没有真正的存储该字段的值。这样表的大小并没有增加。我们可以利用索引把这个字段上的值进行物理存储。</p><h3 id="在虚拟字段上加索引"><a href="#在虚拟字段上加索引" class="headerlink" title="在虚拟字段上加索引"></a>在虚拟字段上加索引</h3><p>再添加索引之前，让我们先看下面查询的执行计划</p><pre><code>EXPLAIN SELECT * FROM `players` WHERE `names_virtual` = &quot;Sally&quot;\G  *************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: players   partitions: NULL         type: ALLpossible_keys: NULL            key: NULL      key_len: NULL          ref: NULL         rows: 6     filtered: 16.67        Extra: Using where</code></pre><p>添加索引</p><pre><code>CREATE INDEX `names_idx` ON `players`(`names_virtual`);  </code></pre><p>再执行上面的查询语句，我们将得到不一样的执行计划</p><pre><code>EXPLAIN SELECT * FROM `players` WHERE `names_virtual` = &quot;Sally&quot;\G  *************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: players   partitions: NULL         type: refpossible_keys: names_idx            key: names_idx      key_len: 22          ref: const         rows: 1     filtered: 100.00        Extra: NULL</code></pre><p>如我们所见，最新的执行计划走了新建的索引。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文介绍了如何在MySQL 5.7中保存JSON文档。为了高效的检索JSON中内容，我们可以利用5.7的虚拟字段来对JSON的不同的KEY来建索引。极大的提高检索的速度。</p><hr><p>本文转自 <em><a href="http://mysql.taobao.org/monthly/2017/12/09/" target="_blank" rel="noopener">阿里云RDS-数据库内核组</a></em><br>再一次感谢您花费时间阅读，祝您在这里记录、阅读、分享愉快！</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Laravel Resources 来整合第三方 API 数据</title>
      <link href="/laravel/li-yong-laravel-resources-lai-zheng-he-di-san-fang-api-shu-ju/"/>
      <url>/laravel/li-yong-laravel-resources-lai-zheng-he-di-san-fang-api-shu-ju/</url>
      
        <content type="html"><![CDATA[<p><img src="https://iocaffcdn.phphub.org/uploads/images/201901/18/1/YDRLhNQq47.png!large" alt="file"></p><p>对于某些应用程序，可能需要第三方服务或者 API 来提取某些数据，将该数据转换为所需的响应，并将其传送到客户端界面。</p><p>为此，我们需要找到一种方法，方便从控制器发送到视图或最终用户界面的数据保持一致性。</p><p>因此，可能需要构建一个代表应用程序中所需资源的新对象或类。</p><p>您或许可能会想『为什么我需要它？』，因为，您不希望在应用程序中公开所有的 API 响应数据，此外，你可能需要转换该响应的某些字段等。</p><p>在本文中，我将向您展示一种简单的方法，将来自第三方 API 传入的数据转换为应用程序中的资源，以帮您保持一致性。</p><blockquote><p>在进一步讨论之前：在这篇文章中，我假设您至少已经基本了解了什么是 API 以及该如何使用 API ，如何使用 Laravel 框架及其某些组件作为 Eloquent ORM 。 如果你不知道上面的文章大概在说明写什么，你可能会发现一些挑战性的概念，但是，嘿，不要气馁，我相信你会发现这篇文章会给你带来一定的价值。</p></blockquote><h3 id="一些关于-“Laravel-resources”-的消息"><a href="#一些关于-“Laravel-resources”-的消息" class="headerlink" title="一些关于 “Laravel resources” 的消息"></a>一些关于 “Laravel resources” 的消息</h3><p>‘API  Resources’ 在 Laravel 5.5 中引入，作为是“将您的模型和模型集合表达并轻松转换为 JSON 数据格式”的一种方式。</p><p>虽然这是官方的说明，并且您发现此部分在官方网站的 Eloquent 文档上没有此目录索引，但您必须知道这些资源并未严格附加到 Eloquent ORM 当中。</p><p>在最基本的意义上来说，Eloquent 允许您将给指定对象转换为不同的对象。</p><pre><code>&lt;?phpnamespace App\Http\Resources;use Illuminate\Http\Resources\Json\Resource;class UserResource extends Resource{    /**     * 将资源转换为数组。     *     * @param  \Illuminate\Http\Request     * @return array     */    public function toArray($request)    {        return [            &#39;id&#39; =&gt; $this-&gt;id,            &#39;name&#39; =&gt; $this-&gt;name,            &#39;email&#39; =&gt; $this-&gt;email,            &#39;created_at&#39; =&gt; $this-&gt;created_at,            &#39;updated_at&#39; =&gt; $this-&gt;updated_at,        ];    }}</code></pre><p>您可以通过阅读官方文档了解有关 Resources 的所有信息：<a href="https://laravel.com/docs/5.5/eloquent-resources" target="_blank" rel="noopener">Eloquent: API Resources</a></p><h3 id="使用第三方-API"><a href="#使用第三方-API" class="headerlink" title="使用第三方 API"></a>使用第三方 API</h3><p>在使用第三方 API 时，您需要找到一种方法将传入的响应数据转换为结构一致的数据。</p><blockquote><p>有关 Laravel 的最新消息：不久前 <a href="https://medium.com/@ericlbarnes" target="_blank" rel="noopener">Eric L. Barnes</a> 发表了一篇文章，描述了他如何使用 Laravel 为 laravel-news 网站建立一个前端页面，然后用 WordPress  作为后端并从 WordPress API 读取数据。你可以点击这里查看所有文章。 <a href="https://laravel-news.com/wordpress-api-with-laravel" target="_blank" rel="noopener">https://laravel-news.com/wordpress-api-with-laravel</a></p></blockquote><p>因此，以具体案例为例。 假设您的应用程序中有一个 WordPress 存储库，它从 WordPress API 中提取数据。</p><pre><code>&lt;?phpclass WordpressRepository {    pubic function getPost($id)    {        $response = $this-&gt;apiClient-&gt;get(            &#39;post&#39;,             $query = [&#39;id&#39; =&gt; $id]        );        // return as array        return json_decode($response, true);    }}</code></pre><p>假设您从 WordPress API 接收此对象(数据)</p><pre><code>// wordpress version 0.1{    ID: 123    post_title: &quot;some title&quot;    post_content: &quot;some content&quot;,    post_author: &quot;joe&quot;,    publish_date: &quot;01-01-2001&quot;}</code></pre><p>您可以将此响应包装到一个数组中，然后在所有控制器或视图上使用此数据。</p><h3 id="响应格式一致性"><a href="#响应格式一致性" class="headerlink" title="响应格式一致性"></a>响应格式一致性</h3><p>不妨想一想，如果 WordPress 的 API 更新了怎么办。假如新版本会返回一个不同格式的数据。</p><pre><code>// wordpress version 0.1{    post_id: 123    title: &quot;some title&quot;    content: &quot;some content&quot;,    author: &quot;joe&quot;,    date: &quot;01-01-2001&quot;}</code></pre><p>那么你就需要在项目的多个位置把 <code>$post[&#39;post_title&#39;]</code> 替换成 <code>$post[&#39;title&#39;]</code> 。</p><p>使用中间件来处理响应数据可以确保数据库的一致性。当响应的格式增加时，你只需要更新某段代码即可。</p><h3 id="使用-API-资源批量处理数据"><a href="#使用-API-资源批量处理数据" class="headerlink" title="使用 API 资源批量处理数据"></a>使用 API 资源批量处理数据</h3><p>正如我之前提到的，你可以使用没有Eloquent的 「Resources」，下面就是一个很好的例子。<br>您需要做的第一件事是创建一个新的「Post」资源; 使用 artisan：</p><p><code>$ php artisan make:resource Post</code></p><pre><code>&lt;?phpnamespace App\Resources;use Illuminate\Http\Resources\Json\Resource;class Post extends Resource{    public function toArray($request)    {        return [            &#39;title&#39; =&gt; $this-&gt;resource[&#39;title&#39;],            &#39;content&#39; =&gt; $this-&gt;resource[&#39;content&#39;],            &#39;slug&#39; =&gt; $this-&gt;resource[&#39;slug&#39;]        ];    }}</code></pre><h3 id="返回单个资源实例"><a href="#返回单个资源实例" class="headerlink" title="返回单个资源实例"></a>返回单个资源实例</h3><p>现在可以参照相同的例子，在你的 API 容器类中，你可以创建一个此资源新的实例，然后使用 resolve() 方法来返回转换后的对象（这将返回一个数组）。</p><pre><code>&lt;?phpclass WordpressRepository {    pubic function getPost($id)    {        $response = $this-&gt;apiClient-&gt;get(            &#39;post&#39;,            $query = [&#39;id&#39; =&gt; $id]        );        $data = json_decode($response, true);        return Post::make($data)-&gt;resolve();    }}</code></pre><h3 id="返回数据集合"><a href="#返回数据集合" class="headerlink" title="返回数据集合"></a>返回数据集合</h3><p>我们可以创建一个专用的资源类 「PostCollection」。</p><p><code>$ php artisan make:resource PostCollection</code></p><pre><code>&lt;?phpnamespace App\PublisherPlus\Resources;use Illuminate\Http\Resources\Json\ResourceCollection;class PostCollection extends ResourceCollection{    public function toArray($request)    {        return [            &#39;data&#39; =&gt; $this-&gt;collection                          -&gt;map                          -&gt;toArray($request)                          -&gt;all(),            &#39;links&#39; =&gt; [               &#39;self&#39; =&gt; &#39;link-value&#39;,             ],        ];    }}</code></pre><p>在上面的例子中，<code>data</code> 将会包含一个 <code>Posts</code> 数组，该数组的结构跟你在 <code>Post</code> 资源中定义的一样。</p><p>你可以在这里了解更多关于 「resource collections」 的信息。</p><p><a href="https://learnku.com/docs/laravel/5.7/eloquent-resources/2298#writing-resources" target="_blank" rel="noopener">API 资源</a></p><h3 id="总结！"><a href="#总结！" class="headerlink" title="总结！"></a>总结！</h3><p>因此，如果你仔细研究 「resources」 的定义。你可以将其视为中间件，用于将已有数据转为新的、不同格式的对象或数组。</p>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种实用的工具</title>
      <link href="/uncategorized/ge-chong-shi-yong-de-gong-ju/"/>
      <url>/uncategorized/ge-chong-shi-yong-de-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>估计大部分人都会有这样的问题，在平常玩微博或的时候看到别人分享的一些实用的东西，比如一些NB的js库，或者php组件等等。看完当时加入了浏览器书签。但是出现的现象就是很少去翻它，或者说由于懒得整理后期也不好找了，这篇就当作是一个书签整理吧，也算是知识共享，有兴趣的朋友可以经常过来看看，会继续保持更新。</p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><ul><li><a href="https://github.com/codeguy/Slim" target="_blank" rel="noopener">Slim</a> - PHP微框架，简单易用易拓展。</li><li><a href="https://github.com/swoole/swoole-src" target="_blank" rel="noopener">Swoole</a> - Swoole是一个PHP的C扩展，可用来开发PHP的高性能高并发TCP/UDP Server。</li><li><a href="https://github.com/guzzle/guzzle" target="_blank" rel="noopener">Guzzle</a> - 强大的RESTful 客户端，支持批量请求。</li><li><a href="https://github.com/jeremeamia/super_closure" target="_blank" rel="noopener">PHP Super Closure</a> - 解决PHP不支持序列化(serialize) <code>Closure</code> 问题。</li><li><a href="https://github.com/visionmedia/php-selector" target="_blank" rel="noopener">PHP Selector</a> - 像jquery选择器一样操作操作网页DOM, 支持大部分CSS3选择器。</li><li><a href="https://github.com/khoaofgod/phpfastcache" target="_blank" rel="noopener">Simple Yet Powerful PHP Caching Class</a> - 好用的PHP缓存类,支持：Files, MemCache, MemCached, APC, WinCache, X-Cache, PDO with SQLite。</li><li><a href="https://github.com/phalcon/zephir" target="_blank" rel="noopener">Zephir</a> - Zephir是一种高级编译语言,为简单编写PHP的C扩展而生。</li><li><a href="https://github.com/davibennun/laravel-push-notification" target="_blank" rel="noopener">Laravel Push Notification</a> - Laravel 推送工具。</li><li><a href="https://github.com/Intervention/image" target="_blank" rel="noopener">Intervention Image</a> - 一个PHP图像处理和操作库，提供更简单和表达方式来创建，编辑和构图。该软件还包括提供服务提供器(ServiceProviders)和外观(Facades)，方便Laravel整合。</li><li><a href="https://github.com/fabpot/Sami" target="_blank" rel="noopener">Sami</a> - PHP API文档生成工具，生成代码注释文档。</li><li><a href="https://github.com/overtrue/socialite" target="_blank" rel="noopener">overtrue/socialite</a> PHP 通用第三方登录组件，支持：微博、QQ、微信公众平台，微信开放平台、豆瓣，Facebook、Google、GitHub、Linkedin。</li><li><a href="https://github.com/overtrue/pinyin" target="_blank" rel="noopener">overtrue/pinyin</a> 史上最准确的PHP中文转拼音工具</li><li><a href="https://github.com/overtrue/wechat" target="_blank" rel="noopener">overtrue/wechat</a> 目前最好用的微信开发工具包</li><li><a href="https://github.com/overtrue/package-builder" target="_blank" rel="noopener">overtrue/package-builder</a> Composer 包构建工具</li></ul><h3 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h3><ul><li><a href="https://github.com/overtrue/laravel-shopping-cart" target="_blank" rel="noopener">laravel-shopping-cart</a> - Laravel 购物车，简单方便,文档齐全。</li><li><a href="https://github.com/overtrue/laravel-lang" target="_blank" rel="noopener">laravel-lang</a> - Laravel 语言包，支持 44+ 种语言。</li><li><a href="https://github.com/jenssegers/Laravel-MongoDB" target="_blank" rel="noopener">Laravel-MongoDB</a> - Laravel 的 MongoDB 数据库组件</li><li><a href="https://github.com/overtrue/laravel-pinyin" target="_blank" rel="noopener">laravel-pinyin</a> - Laravel 的中文转拼音插件，基于<a href="https://github.com/overtrue/pinyin" target="_blank" rel="noopener">overtrue/pinyin</a></li><li><a href="https://github.com/overtrue/laravel-wechat" target="_blank" rel="noopener">laravel-wechat</a> - Laravel 的微信开发组件，基于<a href="https://github.com/overtrue/wechat" target="_blank" rel="noopener">overtrue/wechat</a></li></ul><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><ul><li><a href="http://phpjs.org/" target="_blank" rel="noopener">phpjs</a> - PHP函数的js实现。</li><li><a href="https://github.com/jprichardson/string.js" target="_blank" rel="noopener">string.js</a> - 轻量级(&lt;5kb)的JavaScript字符串操作库，强大的字符串处理API。</li><li><a href="https://github.com/jashkenas/underscore" target="_blank" rel="noopener">underscore</a> - 强大的js函数库，提供超多易用的封装。</li><li><a href="http://jedfoster.com/Readmore.js" target="_blank" rel="noopener">readmore.js</a> - 隐藏过长的文章。按高度隐藏的，如果担心Feed流里边因为某篇文章特别长，影响浏览时可以用上。支持bower，install readmore 即可。</li><li><a href="https://github.com/overtrue/share.js" target="_blank" rel="noopener">share.js</a> - 一键分享到微博、QQ空间、QQ好友、微信、腾讯微博、豆瓣、Facebook、Twitter、Linkedin、Google+、点点等社交网站。</li><li><a href="https://github.com/idiot/unslider" target="_blank" rel="noopener">Unslider</a> - 简单易用的jQuery slider 插件。</li><li><a href="http://aroc.github.io/side-comments-demo/" target="_blank" rel="noopener">SideComments.js</a> - 类似Medium.com的文本边栏评论插件。</li><li><a href="https://github.com/michael/github" target="_blank" rel="noopener">Github.js</a> - GitHub API js版本。</li><li><a href="https://github.com/moment/moment" target="_blank" rel="noopener">Moment.js</a> - 提供在JavaScript中分析，验证，操作和显示日期的API。</li><li><a href="https://github.com/cheeriojs/cheerio" target="_blank" rel="noopener">cheerio</a> - 专为服务器端设计的，快速，灵活，精益的jQuery核心功能实现。</li><li><a href="https://github.com/chjj/marked" target="_blank" rel="noopener">marked</a> - 一个高效的Markdown分析器和编译器。</li><li><a href="https://github.com/evilstreak/markdown-js" target="_blank" rel="noopener">markdown-js</a> - JavaScript Mardown 解析器。</li><li><a href="https://github.com/fgnass/spin.js" target="_blank" rel="noopener">Spin.js</a> - “加载中” 动画生成工具。</li><li><a href="https://github.com/hassankhan/emojify.js" target="_blank" rel="noopener">emojify.js</a> - 超简单的让你的网页支持emoji表情。</li><li><a href="https://highlightjs.org/" target="_blank" rel="noopener">highlightjs</a> - 代码高亮。</li><li><a href="https://github.com/fengyuanchen/distpicker" target="_blank" rel="noopener">fengyuanchen/distpicker</a> - 中国省市区三级联动，强大的自定义功能。</li></ul><h5 id="表单美化"><a href="#表单美化" class="headerlink" title="表单美化"></a>表单美化</h5><ul><li><a href="https://github.com/abpetkov/switchery" target="_blank" rel="noopener">switchery</a> - IOS7风格的checkbox美化插件，demo: <a href="http://abpetkov.github.io/switchery/。" target="_blank" rel="noopener">http://abpetkov.github.io/switchery/。</a></li><li><a href="https://github.com/harvesthq/chosen" target="_blank" rel="noopener">chosen</a> - 下拉框美化强化插件，demo: <a href="http://harvesthq.github.io/chosen/。" target="_blank" rel="noopener">http://harvesthq.github.io/chosen/。</a></li><li><a href="https://github.com/firstopinion/formatter.js" target="_blank" rel="noopener">formatter.js</a> - 强大输入框格式化插件，指定输入框可输入的格式。</li><li><a href="https://github.com/fronteed/iCheck" target="_blank" rel="noopener">iCheck</a> - 高度可定制的复选框和单选按钮 (jQuery &amp; Zepto)。</li></ul><h5 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h5><ul><li><a href="http://ionicframework.com/" target="_blank" rel="noopener">ionic</a> - 混合应用开发框架，使用html+javascript+css创建Android与IOS应用。</li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li><a href="https://github.com/sofish/typo.css" target="_blank" rel="noopener">typo.css</a> - 中文网页重设与排版，一致化浏览器排版效果，构建最适合中文阅读的网页排版。</li></ul><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ul><li><a href="https://github.com/fex-team/styleguide/blob/master/project.md" target="_blank" rel="noopener">开源项目目录规范</a></li><li><a href="https://github.com/fex-team/styleguide/blob/master/javascript.md" target="_blank" rel="noopener">JavaScript编码规范</a></li><li><a href="https://github.com/fex-team/styleguide/blob/master/css.md" target="_blank" rel="noopener">CSS 编码规范</a></li><li><a href="https://github.com/fex-team/styleguide/blob/master/html.md" target="_blank" rel="noopener">HTML 编码规范</a></li><li><a href="https://github.com/fex-team/styleguide/blob/master/markdown.md" target="_blank" rel="noopener">Markdown 编写规范</a></li></ul><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><ul><li><a href="https://github.com/driftyco/ionicons" target="_blank" rel="noopener">ionicons</a> - ionic图标。</li><li><a href="http://emoji.muan.co/" target="_blank" rel="noopener">emoji查询</a>,<a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="noopener">emoji-cheat-sheet</a> - emoji查询。</li><li><a href="https://github.com/hassankhan/emojify.js" target="_blank" rel="noopener">emojify.js</a> - 让你的网页支持emoji表情。</li></ul><h2 id="前端工具"><a href="#前端工具" class="headerlink" title="前端工具"></a>前端工具</h2><ul><li><a href="https://github.com/fex-team/fis" target="_blank" rel="noopener">FIS</a> - Front-end Integrated Solution - 前端集成解决方案。</li><li><a href="https://github.com/nkashyap/console.io" target="_blank" rel="noopener">JavaScript的远程Web控制台</a> - Console.IO是一个NodeJS项目。它为网站和Web应用程序提供的远程Web控制台。它采用express.io（express和socket.io）提供用户实时体验。 它能工作在几乎所有的现代浏览器，移动设备，智能电视等平台。</li><li><a href="http://ecd.tencent.com/css3/tools.html" target="_blank" rel="noopener">CSS3动画生成工具</a> - 在线制作&amp;预览CSS3动画。</li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ul><li><a href="https://github.com/kazuho/h2o" target="_blank" rel="noopener">H2O</a> - 比nginx快2倍的web服务器。</li><li><a href="https://github.com/Qihoo360/Atlas" target="_blank" rel="noopener">Atlas</a> - 基于MySQL协议的数据库中间层项目。</li></ul><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><ul><li><a href="https://github.com/benweet/stackedit" target="_blank" rel="noopener">StackEdit</a> - 强大的在线Markdown编辑器，在线地址：<a href="https://stackedit.io/。" target="_blank" rel="noopener">https://stackedit.io/。</a></li><li><a href="https://github.com/kkga/spacegray" target="_blank" rel="noopener">Spacegray</a> - 特别漂亮的Sublime Text主题，建议与<code>Monaco</code>字体配合使用。</li><li><a href="http://colorsublime.com/" target="_blank" rel="noopener">Colorsublime</a> - 超多Sublime Text主题。</li></ul><h2 id="Sublime-text-插件"><a href="#Sublime-text-插件" class="headerlink" title="Sublime text 插件"></a>Sublime text 插件</h2><ul><li><a href="http://wbond.net/sublime_packages/alignment" target="_blank" rel="noopener">Alignment</a> - 代码对齐工具，根据=号对齐以及其它定义的符号竖向对齐你的代码。</li><li><a href="https://github.com/SublimeText/EncodingHelper" target="_blank" rel="noopener">EncodingHelper</a> - 在状态栏显示当前文件的编码，支持从其它编码转为UTF-8。</li><li><a href="https://github.com/titoBouzout/SideBarEnhancements" target="_blank" rel="noopener">SideBarEnhancement</a> - 边栏菜单增强工具。</li><li><a href="https://github.com/sublimetext/tag" target="_blank" rel="noopener">Tag</a> - html标签助手。</li><li><a href="https://github.com/alienhard/SublimeAllAutocomplete" target="_blank" rel="noopener">All Autocomplete</a> - 在当前打开的文件中提示函数，方法名等。</li><li><a href="https://github.com/spadgos/sublime-jsdocs" target="_blank" rel="noopener">DocBlockr</a> - 自动注释工具。</li><li><a href="https://github.com/dzhibas/SublimePrettyJson" target="_blank" rel="noopener">Pretty JSON</a> - json格式化工具，快捷键：OSX: cmd+ctl+j, win: ctl+alt+j。</li><li><a href="http://weslly.github.io/ColorPicker/" target="_blank" rel="noopener">ColorPicker</a> - 直接在sublime里调用调色板的工具。</li><li><a href="http://ipestov.com/the-best-plugins-for-sublime-text/" target="_blank" rel="noopener">Emmet</a> - 高效编写HTML的工具，原zen-coding。</li><li><a href="https://github.com/BoundInCode/AutoFileName" target="_blank" rel="noopener">AutoFileName</a> - 自动完成路径的文件 - 非常方便。</li><li><a href="https://github.com/kemayo/sublime-text-git" target="_blank" rel="noopener">Git</a> - 顾名思义。</li><li><a href="https://github.com/jisaacks/GitGutter" target="_blank" rel="noopener">GitGutter</a> - 在边栏高亮你的文件内容变动，增加，删除，修改，类似git diff一样的效果。</li><li><a href="https://github.com/gornostal/Modific" target="_blank" rel="noopener">Modific</a> - 与上一个插件基本一样。</li><li><a href="https://sublimall.org/" target="_blank" rel="noopener">Sublimall</a> - 免费的Sublime备份与同步工具，只需要一个账户，你的插件，配置，打开的文件等都会自动同步。</li><li><a href="https://github.com/ttscoff/MarkdownEditing" target="_blank" rel="noopener">MarkdownEditing</a> - Markdown编写的最好插件：语法高亮，缩写，自动完成，配色方案等</li><li><a href="http://wbond.net/sublime_packages/sftp" target="_blank" rel="noopener">Sublime SFTP</a> - SFTP工具。</li><li><a href="https://github.com/SublimeText/CTags" target="_blank" rel="noopener">CTags</a> - 自动提示工具。</li><li><a href="http://github.com/SublimeLinter/SublimeLinter" target="_blank" rel="noopener">SublimeLinter</a> - 语法检测工具，支持： C/C++, Java, Python, PHP, JS, HTML, CSS等。</li><li><a href="https://github.com/csscomb/sublime-csscomb" target="_blank" rel="noopener">CSScomb</a> - CSS编码风格格式化工具。</li><li><a href="https://github.com/jshint/fixmyjs" target="_blank" rel="noopener">FixMyJS</a>, <a href="https://github.com/paulirish/sublime-jsfmt" target="_blank" rel="noopener">Jsfmt</a> 与 <a href="https://github.com/jdc0589/JsFormat" target="_blank" rel="noopener">JsFormat</a> - Js/JSON编码风格格式化工具</li><li><a href="https://github.com/timonwong/SublimeAStyleFormatter" target="_blank" rel="noopener">AStyleFormatter</a> - C/C++/C#/Java 编码风格格式化工具</li><li><a href="https://github.com/jorgeatgu/SVG-Snippets" target="_blank" rel="noopener">SVG-Snippets</a> - 设置自定义SVG片段。</li><li><a href="https://github.com/rmaksim/Sublime-Text-2-Inc-Dec-Value" target="_blank" rel="noopener">Inc-Dec-Value</a> - 数字，日期，十六进制颜色值等的递增/递减.</li></ul><h2 id="书籍与教程"><a href="#书籍与教程" class="headerlink" title="书籍与教程"></a>书籍与教程</h2><ul><li><a href="https://github.com/numbbbbb/the-swift-programming-language-in-chinese" target="_blank" rel="noopener">《The Swift Programming Language》</a> - 中文版 Apple 官方 Swift 教程。</li><li><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July" target="_blank" rel="noopener">《程序员编程艺术 — 面试和算法心得》</a> - CSDN 600万博客结构之法算法之道部分经典博文优化版。</li><li><a href="https://github.com/bolasblack/api-guide" target="_blank" rel="noopener">RESTful API 接口设计指北</a> - 不错的API设计教程。</li><li><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="noopener">GitHub秘籍</a> - GitHub秘籍</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li><a href="https://github.com/ideawu/icomet" target="_blank" rel="noopener">icomet</a> - 一个支持百万并发连接的comet服务器：icomet。</li><li><a href="https://github.com/rogerwang/node-webkit" target="_blank" rel="noopener">node-webkit</a> -基于chromium和nodejs的应用，允许你使用html+javascript开发桌面应用。</li><li><a href="https://github.com/coolwanglu/pdf2htmlEX" target="_blank" rel="noopener">pdf2htmlEX</a> - 转换PDF为Html。</li><li><a href="https://highlightjs.org/" target="_blank" rel="noopener">highlightjs</a> - 代码高亮。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载量最高的 100 个 Laravel 扩展包推荐</title>
      <link href="/laravel/xia-zai-liang-zui-gao-de-100-ge-laravel-kuo-zhan-bao-tui-jian/"/>
      <url>/laravel/xia-zai-liang-zui-gao-de-100-ge-laravel-kuo-zhan-bao-tui-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Laravel 另一个令人喜欢的地方，是拥有活跃的开发者社区，而活跃的开发者社区带来的，是繁华的扩展包生态。<br>本文对 Packagist 上打了 Laravel 标签 的扩展包进行整理，截止到现在 2016 年 8 月 9号，有超过 7176 个扩展包，以下是下载量最大的 100 个。<br>相信下面这 100 个扩展包会让你的编码更加高效 :beers:</p><h4 id="排名"><a href="#排名" class="headerlink" title="排名"></a>排名</h4><table><thead><tr><th style="text-align:left">排名</th><th style="text-align:left">下载次数</th><th style="text-align:left">Star 数</th><th style="text-align:left">扩展包</th><th style="text-align:left">一句话描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">2883968</td><td style="text-align:left">3968</td><td style="text-align:left">intervention/image</td><td style="text-align:left">图片处理扩展包，支持裁剪、水印等处理，使用教程请见 <a href="https://laravel-china.org/topics/1903" target="_blank" rel="noopener">https://laravel-china.org/topics/1903</a></td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">2215372</td><td style="text-align:left">3694</td><td style="text-align:left">barryvdh/laravel-debugbar</td><td style="text-align:left">页面调试工具栏 (对 phpdebugbar 的封装)，教程请见：<a href="https://laravel-china.org/topics/2531" target="_blank" rel="noopener">https://laravel-china.org/topics/2531</a></td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">2173424</td><td style="text-align:left">3570</td><td style="text-align:left">barryvdh/laravel-ide-helper</td><td style="text-align:left">使用 IDE 开发 Laravel 项目的好帮手，支持 Facade 方法跳转，相关讨论请见：<a href="https://laravel-china.org/topics/2532" target="_blank" rel="noopener">https://laravel-china.org/topics/2532</a></td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">1269005</td><td style="text-align:left">2396</td><td style="text-align:left">maatwebsite/excel</td><td style="text-align:left">Excel 处理工具，中文处理时会出现乱码，推荐使用 laravel-snappy，历史讨论请见 <a href="https://laravel-china.org/topics/2477" target="_blank" rel="noopener">https://laravel-china.org/topics/2477</a></td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">1131952</td><td style="text-align:left">702</td><td style="text-align:left">aws/aws-sdk-php-laravel</td><td style="text-align:left">亚马逊 AWS 服务的开发者工具包，亚马逊云已经在 2016 年 8 月 正式落地中国，这个包以后会常用到，教程请见：<a href="https://laravel-china.org/topics/2533" target="_blank" rel="noopener">https://laravel-china.org/topics/2533</a></td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">750405</td><td style="text-align:left">1016</td><td style="text-align:left">jenssegers/agent</td><td style="text-align:left">客户端 User Agent 解析工具（基于 Mobiledetect），教程请见：<a href="https://laravel-china.org/topics/782" target="_blank" rel="noopener">https://laravel-china.org/topics/782</a></td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">711842</td><td style="text-align:left">216</td><td style="text-align:left">bugsnag/bugsnag-laravel</td><td style="text-align:left">Bugsnag 服务集成包（异常捕获服务，可惜国内访问效果不好），教程请见：<a href="https://laravel-china.org/topics/2534" target="_blank" rel="noopener">https://laravel-china.org/topics/2534</a></td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">683268</td><td style="text-align:left">3268</td><td style="text-align:left">zizaco/entrust</td><td style="text-align:left">基于用户组的用户权限系统（必备），教程请见：<a href="https://laravel-china.org/topics/166" target="_blank" rel="noopener">https://laravel-china.org/topics/166</a></td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">644651</td><td style="text-align:left">821</td><td style="text-align:left">barryvdh/laravel-cors</td><td style="text-align:left">跨域资源共享的支持</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">571221</td><td style="text-align:left">963</td><td style="text-align:left">barryvdh/laravel-dompdf</td><td style="text-align:left">PDF 操作工具（基于 dompdf ）</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">548367</td><td style="text-align:left">1172</td><td style="text-align:left">laravelbook/ardent</td><td style="text-align:left">自动 数据模型 验证工具</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">534650</td><td style="text-align:left">2364</td><td style="text-align:left">tymon/jwt-auth</td><td style="text-align:left">JWT (JSON Web Token) 用户认证机制，示例项目 <a href="https://laravel-china.org/topics/2023" target="_blank" rel="noopener">https://laravel-china.org/topics/2023</a></td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">496656</td><td style="text-align:left">1977</td><td style="text-align:left">lucadegasperi/oauth2-server-laravel</td><td style="text-align:left">OAuth 2.0 支持，实例教程：<a href="https://laravel-china.org/topics/1792" target="_blank" rel="noopener">https://laravel-china.org/topics/1792</a></td></tr><tr><td style="text-align:left">14</td><td style="text-align:left">468263</td><td style="text-align:left">595</td><td style="text-align:left">maknz/slack</td><td style="text-align:left">Slack 服务的集成</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left">423728</td><td style="text-align:left">1920</td><td style="text-align:left">jenssegers/mongodb</td><td style="text-align:left">MongoDB 数据库的支持 ，教程：<a href="https://laravel-china.org/topics/309" target="_blank" rel="noopener">https://laravel-china.org/topics/309</a></td></tr><tr><td style="text-align:left">16</td><td style="text-align:left">390006</td><td style="text-align:left">4061</td><td style="text-align:left">dingo/api</td><td style="text-align:left">构建 API 服务器的完整解决方案，教程：<a href="https://laravel-china.org/topics/1159" target="_blank" rel="noopener">https://laravel-china.org/topics/1159</a></td></tr><tr><td style="text-align:left">17</td><td style="text-align:left">370341</td><td style="text-align:left">912</td><td style="text-align:left">itsgoingd/clockwork</td><td style="text-align:left">配合 Chrome 浏览器下同名插件的调试工具，教程：<a href="https://laravel-china.org/topics/23" target="_blank" rel="noopener">https://laravel-china.org/topics/23</a></td></tr><tr><td style="text-align:left">18</td><td style="text-align:left">357552</td><td style="text-align:left">600</td><td style="text-align:left">anahkiasen/underscore-php</td><td style="text-align:left">Underscore.js 类似的 PHP 语法支持</td></tr><tr><td style="text-align:left">19</td><td style="text-align:left">355742</td><td style="text-align:left">1191</td><td style="text-align:left">laracasts/generators</td><td style="text-align:left">Laracasts 出品的代码快速生成工具（推荐） ，使用教程：<a href="https://laravel-china.org/topics/2535" target="_blank" rel="noopener">https://laravel-china.org/topics/2535</a></td></tr><tr><td style="text-align:left">20</td><td style="text-align:left">344522</td><td style="text-align:left">1200</td><td style="text-align:left">cviebrock/eloquent-sluggable</td><td style="text-align:left">文章标题 URL 别名处理工具，教程：<a href="https://laravel-china.org/topics/1926" target="_blank" rel="noopener">https://laravel-china.org/topics/1926</a></td></tr><tr><td style="text-align:left">21</td><td style="text-align:left">344237</td><td style="text-align:left">382</td><td style="text-align:left">laracasts/testdummy</td><td style="text-align:left">Laracasts 出品的假数据创建工具</td></tr><tr><td style="text-align:left">22</td><td style="text-align:left">321543</td><td style="text-align:left">709</td><td style="text-align:left">davejamesmiller/laravel-breadcrumbs</td><td style="text-align:left">页面面包屑工具，教程：<a href="https://laravel-china.org/topics/1914" target="_blank" rel="noopener">https://laravel-china.org/topics/1914</a></td></tr><tr><td style="text-align:left">23</td><td style="text-align:left">309529</td><td style="text-align:left">962</td><td style="text-align:left">laracasts/utilities</td><td style="text-align:left">将 PHP 变量转换为 JavaScript 变量</td></tr><tr><td style="text-align:left">24</td><td style="text-align:left">304501</td><td style="text-align:left">621</td><td style="text-align:left">roumen/sitemap</td><td style="text-align:left">Sitemap 生成工具</td></tr><tr><td style="text-align:left">25</td><td style="text-align:left">303660</td><td style="text-align:left">827</td><td style="text-align:left">yajra/laravel-datatables-oracle</td><td style="text-align:left">jQuery DataTables 的后端支持</td></tr><tr><td style="text-align:left">26</td><td style="text-align:left">302076</td><td style="text-align:left">336</td><td style="text-align:left">webpatser/laravel-uuid</td><td style="text-align:left">RFC 4122 标准生成的 UUID ，使用教程 <a href="https://laravel-china.org/topics/2538" target="_blank" rel="noopener">https://laravel-china.org/topics/2538</a></td></tr><tr><td style="text-align:left">27</td><td style="text-align:left">301605</td><td style="text-align:left">535</td><td style="text-align:left">rcrowe/twigbridge</td><td style="text-align:left">Twig 模板引擎支持</td></tr><tr><td style="text-align:left">28</td><td style="text-align:left">294356</td><td style="text-align:left">218</td><td style="text-align:left">intervention/imagecache</td><td style="text-align:left">图片缓存增强工具</td></tr><tr><td style="text-align:left">29</td><td style="text-align:left">289380</td><td style="text-align:left">958</td><td style="text-align:left">indatus/dispatcher</td><td style="text-align:left">计划任务分发器（直接可替换掉 Cron），L5 内置了类似的功能</td></tr><tr><td style="text-align:left">30</td><td style="text-align:left">234578</td><td style="text-align:left">589</td><td style="text-align:left">jenssegers/date</td><td style="text-align:left">日期处理工具（让 Carbon 支持多语言，中文用户的福音）</td></tr><tr><td style="text-align:left">31</td><td style="text-align:left">234151</td><td style="text-align:left">715</td><td style="text-align:left">rap2hpoutre/laravel-log-viewer</td><td style="text-align:left">非常方便的页面 Log 查看工具，必备，不过使用时请注意访问权限控制</td></tr><tr><td style="text-align:left">32</td><td style="text-align:left">204976</td><td style="text-align:left">1109</td><td style="text-align:left">baum/baum</td><td style="text-align:left">嵌套集合 (Nested Set) 模型的支持，教程：<a href="https://laravel-china.org/topics/2124" target="_blank" rel="noopener">https://laravel-china.org/topics/2124</a></td></tr><tr><td style="text-align:left">33</td><td style="text-align:left">204619</td><td style="text-align:left">2146</td><td style="text-align:left">anahkiasen/rocketeer</td><td style="text-align:left">现代化的服务器代码部署工具</td></tr><tr><td style="text-align:left">34</td><td style="text-align:left">194675</td><td style="text-align:left">1026</td><td style="text-align:left">anahkiasen/former</td><td style="text-align:left">强大的表单构造器，教程请见 <a href="https://laravel-china.org/topics/2539" target="_blank" rel="noopener">https://laravel-china.org/topics/2539</a></td></tr><tr><td style="text-align:left">35</td><td style="text-align:left">190032</td><td style="text-align:left">375</td><td style="text-align:left">barryvdh/laravel-snappy</td><td style="text-align:left">HTML 生成 PDF/Image 工具（利用 wkhtmltopdf）</td></tr><tr><td style="text-align:left">36</td><td style="text-align:left">184879</td><td style="text-align:left">361</td><td style="text-align:left">thujohn/twitter</td><td style="text-align:left">Twitter API 的支持</td></tr><tr><td style="text-align:left">37</td><td style="text-align:left">184078</td><td style="text-align:left">228</td><td style="text-align:left">orchestra/testbench</td><td style="text-align:left">Laravel 扩展包的单元测试工具</td></tr><tr><td style="text-align:left">38</td><td style="text-align:left">181799</td><td style="text-align:left">258</td><td style="text-align:left">graham-campbell/flysystem</td><td style="text-align:left">文件系统操作，多平台支持（AWS，Dropbox 等）</td></tr><tr><td style="text-align:left">39</td><td style="text-align:left">180921</td><td style="text-align:left">342</td><td style="text-align:left">mews/purifier</td><td style="text-align:left">用户提交的 Html 白名单过滤，<a href="https://laravel-china.org/topics/36" target="_blank" rel="noopener">https://laravel-china.org/topics/36</a></td></tr><tr><td style="text-align:left">40</td><td style="text-align:left">175355</td><td style="text-align:left">349</td><td style="text-align:left">laracasts/presenter</td><td style="text-align:left">Laracasts 出品的 Presenter 方案</td></tr><tr><td style="text-align:left">41</td><td style="text-align:left">172640</td><td style="text-align:left">852</td><td style="text-align:left">venturecraft/revisionable</td><td style="text-align:left">数据模型的操作记录（如管理员操作日记）</td></tr><tr><td style="text-align:left">42</td><td style="text-align:left">168707</td><td style="text-align:left">995</td><td style="text-align:left">mcamara/laravel-localization</td><td style="text-align:left">Laravel 本地化功能增强</td></tr><tr><td style="text-align:left">43</td><td style="text-align:left">166917</td><td style="text-align:left">366</td><td style="text-align:left">league/factory-muffin</td><td style="text-align:left">允许更加方便的创建对象，一般在测试中常用（基本上是 ROR 的 factory_girl 的复制版）</td></tr><tr><td style="text-align:left">44</td><td style="text-align:left">165140</td><td style="text-align:left">271</td><td style="text-align:left">robclancy/presenter</td><td style="text-align:left">Elequent 的 Presenter 方案</td></tr><tr><td style="text-align:left">45</td><td style="text-align:left">163835</td><td style="text-align:left">150</td><td style="text-align:left">intouch/laravel-newrelic</td><td style="text-align:left">应用状态监控服务 NewRelic 开发者工具包</td></tr><tr><td style="text-align:left">46</td><td style="text-align:left">157930</td><td style="text-align:left">855</td><td style="text-align:left">xethron/migrations-generator</td><td style="text-align:left">从现存的数据中以 migration 的形式导出数据库表，包括索引和外键，相当于 数据库迁移</td></tr><tr><td style="text-align:left">47</td><td style="text-align:left">149079</td><td style="text-align:left">410</td><td style="text-align:left">greggilbert/recaptcha</td><td style="text-align:left">reCAPTCHA 验证码的支持</td></tr><tr><td style="text-align:left">48</td><td style="text-align:left">144971</td><td style="text-align:left">594</td><td style="text-align:left">watson/validating</td><td style="text-align:left">以 Trait 的方式来实现 Eloquent 数据模型保存的时候自动验证</td></tr><tr><td style="text-align:left">49</td><td style="text-align:left">142284</td><td style="text-align:left">814</td><td style="text-align:left">dimsav/laravel-translatable</td><td style="text-align:left">数据库的多语言翻译方案</td></tr><tr><td style="text-align:left">50</td><td style="text-align:left">138661</td><td style="text-align:left">120</td><td style="text-align:left">laracasts/behat-laravel-extension</td><td style="text-align:left">Behat 测试框架的 Laravel 支持</td></tr><tr><td style="text-align:left">51</td><td style="text-align:left">137782</td><td style="text-align:left">200</td><td style="text-align:left">jenssegers/rollbar</td><td style="text-align:left">Rollbar 错误监控服务的自动集成</td></tr><tr><td style="text-align:left">52</td><td style="text-align:left">134723</td><td style="text-align:left">330</td><td style="text-align:left">torann/geoip</td><td style="text-align:left">通过 IP 获取到对应的地理位置信息（GeoIP 数据库），请参考：<a href="https://laravel-china.org/topics/2537" target="_blank" rel="noopener">https://laravel-china.org/topics/2537</a></td></tr><tr><td style="text-align:left">53</td><td style="text-align:left">133803</td><td style="text-align:left">658</td><td style="text-align:left">davibennun/laravel-push-notification</td><td style="text-align:left">App 的 Push Notification 发送工具，支持苹果的 APNS 和 安卓的 GCM</td></tr><tr><td style="text-align:left">54</td><td style="text-align:left">128523</td><td style="text-align:left">168</td><td style="text-align:left">chumper/zipper</td><td style="text-align:left">ZIp 打包工具（基于 ZipArchive）</td></tr><tr><td style="text-align:left">55</td><td style="text-align:left">127700</td><td style="text-align:left">244</td><td style="text-align:left">simplesoftwareio/simple-qrcode</td><td style="text-align:left">二维码生成工具</td></tr><tr><td style="text-align:left">56</td><td style="text-align:left">125421</td><td style="text-align:left">374</td><td style="text-align:left">graham-campbell/markdown</td><td style="text-align:left">Markdown 解析器</td></tr><tr><td style="text-align:left">57</td><td style="text-align:left">125315</td><td style="text-align:left">164</td><td style="text-align:left">aloha/twilio</td><td style="text-align:left">Twillio API 支持</td></tr><tr><td style="text-align:left">58</td><td style="text-align:left">123623</td><td style="text-align:left">295</td><td style="text-align:left">propaganistas/laravel-phone</td><td style="text-align:left">手机号码，电话号码验证支持</td></tr><tr><td style="text-align:left">59</td><td style="text-align:left">121845</td><td style="text-align:left">421</td><td style="text-align:left">orangehill/iseed</td><td style="text-align:left">将数据从数据库以 seed 的方式导出，数据填充 的逆向操作。（推荐）</td></tr><tr><td style="text-align:left">60</td><td style="text-align:left">121350</td><td style="text-align:left">380</td><td style="text-align:left">sammyk/laravel-facebook-sdk</td><td style="text-align:left">（非官方）Laravel 的 Facebook 开发者工具包</td></tr><tr><td style="text-align:left">61</td><td style="text-align:left">120891</td><td style="text-align:left">497</td><td style="text-align:left">vinkla/hashids</td><td style="text-align:left">Hash ID 生成器，方便把数字的 ID 隐藏（基于Hashids），教程：<a href="https://laravel-china.org/topics/2536" target="_blank" rel="noopener">https://laravel-china.org/topics/2536</a></td></tr><tr><td style="text-align:left">62</td><td style="text-align:left">116939</td><td style="text-align:left">993</td><td style="text-align:left">spatie/laravel-backup</td><td style="text-align:left">数据备份工具，支持压缩，支持各种文件系统（推荐）</td></tr><tr><td style="text-align:left">63</td><td style="text-align:left">116718</td><td style="text-align:left">459</td><td style="text-align:left">mccool/laravel-auto-presenter</td><td style="text-align:left">自动注入 Presenter，教程：<a href="https://laravel-china.org/topics/1267" target="_blank" rel="noopener">https://laravel-china.org/topics/1267</a></td></tr><tr><td style="text-align:left">64</td><td style="text-align:left">111879</td><td style="text-align:left">270</td><td style="text-align:left">graham-campbell/throttle</td><td style="text-align:left">阀门控制工具</td></tr><tr><td style="text-align:left">65</td><td style="text-align:left">106306</td><td style="text-align:left">1766</td><td style="text-align:left">frozennode/administrator</td><td style="text-align:left">快速创建基于数据模型的 CRUD 管理员后台，教程：<a href="https://laravel-china.org/topics/158" target="_blank" rel="noopener">https://laravel-china.org/topics/158</a> , <a href="https://laravel-china.org/topics/2407" target="_blank" rel="noopener">https://laravel-china.org/topics/2407</a></td></tr><tr><td style="text-align:left">66</td><td style="text-align:left">105181</td><td style="text-align:left">430</td><td style="text-align:left">codesleeve/laravel-stapler</td><td style="text-align:left">专为 ORM 定制的文件上传支持</td></tr><tr><td style="text-align:left">67</td><td style="text-align:left">100442</td><td style="text-align:left">307</td><td style="text-align:left">webpatser/laravel-countries</td><td style="text-align:left">世界所有国家数据，包括首都汇率等</td></tr><tr><td style="text-align:left">68</td><td style="text-align:left">97451</td><td style="text-align:left">848</td><td style="text-align:left">prettus/l5-repository</td><td style="text-align:left">Repository 开发模式的支持</td></tr><tr><td style="text-align:left">69</td><td style="text-align:left">96491</td><td style="text-align:left">371</td><td style="text-align:left">pragmarx/google2fa</td><td style="text-align:left">用户认证方案，支持谷歌提倡的双向认证和 HOTP 认证算法</td></tr><tr><td style="text-align:left">70</td><td style="text-align:left">94117</td><td style="text-align:left">195</td><td style="text-align:left">hisorange/browser-detect</td><td style="text-align:left">浏览器检测工具，包括客户端对 JavaScript 和 CSS 支持情况的检测，教程：<a href="https://laravel-china.org/topics/2046" target="_blank" rel="noopener">https://laravel-china.org/topics/2046</a></td></tr><tr><td style="text-align:left">71</td><td style="text-align:left">93442</td><td style="text-align:left">277</td><td style="text-align:left">graham-campbell/htmlmin</td><td style="text-align:left">基于 minify 的 HTML 压缩工具</td></tr><tr><td style="text-align:left">72</td><td style="text-align:left">90609</td><td style="text-align:left">156</td><td style="text-align:left">toin0u/geocoder-laravel</td><td style="text-align:left">地理位置操作工具集（基于Geocoder）</td></tr><tr><td style="text-align:left">73</td><td style="text-align:left">89845</td><td style="text-align:left">491</td><td style="text-align:left">edvinaskrucas/notification</td><td style="text-align:left">页面消息提醒的组件</td></tr><tr><td style="text-align:left">74</td><td style="text-align:left">89333</td><td style="text-align:left">403</td><td style="text-align:left">laracasts/integrated</td><td style="text-align:left">PHPUnit 的集成测试支持</td></tr><tr><td style="text-align:left">75</td><td style="text-align:left">88682</td><td style="text-align:left">779</td><td style="text-align:left">laravel/envoy</td><td style="text-align:left">Laravel 官方出品的简单的部署工具，教程：<a href="https://laravel-china.org/topics/24" target="_blank" rel="noopener">https://laravel-china.org/topics/24</a></td></tr><tr><td style="text-align:left">76</td><td style="text-align:left">86793</td><td style="text-align:left">137</td><td style="text-align:left">felixkiss/uniquewith-validator</td><td style="text-align:left">表单验证规则增加字段之间的唯一性验证</td></tr><tr><td style="text-align:left">77</td><td style="text-align:left">81211</td><td style="text-align:left">200</td><td style="text-align:left">graham-campbell/exceptions</td><td style="text-align:left">错误异常处理工具，支持开发和生产环境，使用 Whoops 进行错误显示</td></tr><tr><td style="text-align:left">78</td><td style="text-align:left">81076</td><td style="text-align:left">163</td><td style="text-align:left">thomaswelton/laravel-gravatar</td><td style="text-align:left">Gravatar 服务的支持</td></tr><tr><td style="text-align:left">79</td><td style="text-align:left">79494</td><td style="text-align:left">477</td><td style="text-align:left">mews/captcha</td><td style="text-align:left">图片验证码方案，使用教程请见：<a href="https://laravel-china.org/topics/2895" target="_blank" rel="noopener">https://laravel-china.org/topics/2895</a></td></tr><tr><td style="text-align:left">80</td><td style="text-align:left">79387</td><td style="text-align:left">222</td><td style="text-align:left">roumen/feed</td><td style="text-align:left">Feed 生成器</td></tr><tr><td style="text-align:left">81</td><td style="text-align:left">79241</td><td style="text-align:left">164</td><td style="text-align:left">cviebrock/image-validator</td><td style="text-align:left">表单验证增加图片专属，如长宽，比例等</td></tr><tr><td style="text-align:left">82</td><td style="text-align:left">77849</td><td style="text-align:left">125</td><td style="text-align:left">laravelcollective/annotations</td><td style="text-align:left">基于注解方式生成路由、事件、模型绑定的映射</td></tr><tr><td style="text-align:left">83</td><td style="text-align:left">77061</td><td style="text-align:left">870</td><td style="text-align:left">gloudemans/shoppingcart</td><td style="text-align:left">一个简单的购物车模块实现</td></tr><tr><td style="text-align:left">84</td><td style="text-align:left">75852</td><td style="text-align:left">149</td><td style="text-align:left">artisaninweb/laravel-soap</td><td style="text-align:left">Soap 协议客户端</td></tr><tr><td style="text-align:left">85</td><td style="text-align:left">75476</td><td style="text-align:left">260</td><td style="text-align:left">jlapp/swaggervel</td><td style="text-align:left">Swagger API 规范支持</td></tr><tr><td style="text-align:left">86</td><td style="text-align:left">73124</td><td style="text-align:left">480</td><td style="text-align:left">barryvdh/laravel-translation-manager</td><td style="text-align:left">翻译辅助工具，包含 Web 界面</td></tr><tr><td style="text-align:left">87</td><td style="text-align:left">72532</td><td style="text-align:left">515</td><td style="text-align:left">patricktalmadge/bootstrapper</td><td style="text-align:left">Twitter Bootstrap 支持</td></tr><tr><td style="text-align:left">88</td><td style="text-align:left">68952</td><td style="text-align:left">133</td><td style="text-align:left">soapbox/laravel-formatter</td><td style="text-align:left">对不同输出格式进行转换，支持Array，CSV，JSON，XML，YAML</td></tr><tr><td style="text-align:left">89</td><td style="text-align:left">66968</td><td style="text-align:left">155</td><td style="text-align:left">fedeisas/laravel-mail-css-inliner</td><td style="text-align:left">将 CSS 样式写入 HTML 里，用于邮件发送内容的样式定制</td></tr><tr><td style="text-align:left">90</td><td style="text-align:left">66881</td><td style="text-align:left">747</td><td style="text-align:left">nicolaslopezj/searchable</td><td style="text-align:left">以 Trait 的形式为 Eloquent 模型增加搜索功能</td></tr><tr><td style="text-align:left">91</td><td style="text-align:left">65754</td><td style="text-align:left">109</td><td style="text-align:left">benconstable/phpspec-laravel</td><td style="text-align:left">PHPSpec BDD 测试框架的 Laravel 扩展</td></tr><tr><td style="text-align:left">92</td><td style="text-align:left">65489</td><td style="text-align:left">193</td><td style="text-align:left">watson/rememberable</td><td style="text-align:left">让 Laravel 5 数据模型支持 remember() 方法</td></tr><tr><td style="text-align:left">93</td><td style="text-align:left">63895</td><td style="text-align:left">373</td><td style="text-align:left">rtconner/laravel-tagging</td><td style="text-align:left">为 Eloquent 模型增加打标签功能</td></tr><tr><td style="text-align:left">94</td><td style="text-align:left">62932</td><td style="text-align:left">68</td><td style="text-align:left">laravelcollective/remote</td><td style="text-align:left">LaravelCollective 维护的 SSH 连接管理工具</td></tr><tr><td style="text-align:left">95</td><td style="text-align:left">60917</td><td style="text-align:left">226</td><td style="text-align:left">khill/lavacharts</td><td style="text-align:left">Google 图表 JavaScript API 的封装</td></tr><tr><td style="text-align:left">96</td><td style="text-align:left">60203</td><td style="text-align:left">115</td><td style="text-align:left">anchu/ftp</td><td style="text-align:left">让 Laravel 支持 FTP 操作</td></tr><tr><td style="text-align:left">97</td><td style="text-align:left">58556</td><td style="text-align:left">355</td><td style="text-align:left">liebig/cron</td><td style="text-align:left">计划任务分发器（直接可替换掉 Cron），L5 内置了类似的功能</td></tr><tr><td style="text-align:left">98</td><td style="text-align:left">57174</td><td style="text-align:left">348</td><td style="text-align:left">lord/laroute</td><td style="text-align:left">JavaScript 读取路由信息的解决方案</td></tr><tr><td style="text-align:left">99</td><td style="text-align:left">57053</td><td style="text-align:left">643</td><td style="text-align:left">spatie/laravel-analytics</td><td style="text-align:left">Google 统计数据获取工具</td></tr><tr><td style="text-align:left">100</td><td style="text-align:left">56639</td><td style="text-align:left">118</td><td style="text-align:left">hieu-le/active</td><td style="text-align:left">非常方便的方案来判断导航元素的 active 状态，使用教程请见：<a href="https://laravel-china.org/topics/2858" target="_blank" rel="noopener">https://laravel-china.org/topics/2858</a></td></tr></tbody></table><h4 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h4><blockquote><p>转载请注明来自于 PHPHub，并贴上本文章链接：<a href="https://laravel-china.org/topics/2530" target="_blank" rel="noopener">https://laravel-china.org/topics/2530</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Packagist 镜像使用方法</title>
      <link href="/composer/packagist-jing-xiang-shi-yong-fang-fa/"/>
      <url>/composer/packagist-jing-xiang-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>还没安装 Composer 吗？请往下看如何安装 Composer 。</p></blockquote><h2 id="镜像用法"><a href="#镜像用法" class="headerlink" title="镜像用法"></a>镜像用法</h2><p>有两种方式启用本镜像服务：</p><ul><li>系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。见“方法一”</li><li>单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。见“方法二”</li></ul><h3 id="修改-composer-的全局配置文件"><a href="#修改-composer-的全局配置文件" class="headerlink" title="修改 composer 的全局配置文件"></a>修改 composer 的全局配置文件</h3><p>修改 composer 的全局配置文件（<em> <code>推荐方式</code> </em>）</p><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p><pre><code>composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></pre><h3 id="修改当前项目的-composer-json-配置文件"><a href="#修改当前项目的-composer-json-配置文件" class="headerlink" title="修改当前项目的 composer.json 配置文件"></a>修改当前项目的 composer.json 配置文件</h3><p>修改当前项目的 composer.json 配置文件：</p><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：</p><pre><code>composer config repo.packagist composer https://packagist.phpcomposer.com</code></pre><p>上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：</p><pre><code>&quot;repositories&quot;: {    &quot;packagist&quot;: {        &quot;type&quot;: &quot;composer&quot;,        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;    }}</code></pre><p>以 laravel 项目的 composer.json 配置文件为例，执行上述命令后如下所示（注意最后几行）：</p><pre><code>{    &quot;name&quot;: &quot;laravel/laravel&quot;,    &quot;description&quot;: &quot;The Laravel Framework.&quot;,    &quot;keywords&quot;: [&quot;framework&quot;, &quot;laravel&quot;],    &quot;license&quot;: &quot;MIT&quot;,    &quot;type&quot;: &quot;project&quot;,    &quot;require&quot;: {        &quot;php&quot;: &quot;&gt;=5.5.9&quot;,        &quot;laravel/framework&quot;: &quot;5.2.*&quot;    },    &quot;config&quot;: {        &quot;preferred-install&quot;: &quot;dist&quot;    },    &quot;repositories&quot;: {        &quot;packagist&quot;: {            &quot;type&quot;: &quot;composer&quot;,            &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;        }    }}</code></pre><p>OK，一切搞定！试一下<code>composer install</code> 来体验飞一般的速度吧！</p><h2 id="镜像原理"><a href="#镜像原理" class="headerlink" title="镜像原理"></a>镜像原理</h2><p>一般情况下，安装包的数据（主要是 zip 文件）一般是从 github.com 上下载的，安装包的元数据是从 packagist.org 上下载的。</p><p>然而，由于众所周知的原因，国外的网站连接速度很慢，并且随时可能被“墙”甚至“不存在”。</p><p>“Packagist 中国全量镜像”所做的就是缓存所有安装包和元数据到国内的机房并通过国内的 CDN 进行加速，这样就不必再去向国外的网站发起请求，从而达到加速 <code>composer install</code> 以及<code>composer update</code> 的过程，并且更加快速、稳定。因此，即使 packagist.org、github.com 发生故障（主要是连接速度太慢和被墙），你仍然可以下载、更新安装包。</p>]]></content>
      
      
      <categories>
          
          <category> Composer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Packagist </tag>
            
            <tag> Composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>避免 Trying to get property of non-object 错误的六种方法</title>
      <link href="/laravel/bi-mian-trying-to-get-property-of-non-object-cuo-wu-de-liu-chong-fang-fa/"/>
      <url>/laravel/bi-mian-trying-to-get-property-of-non-object-cuo-wu-de-liu-chong-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>在使用链式操作的时候，例如：</p><pre><code>return $user-&gt;avatar-&gt;url;</code></pre><p>如果 <code>$user-&gt;avatar</code> 为 <code>null</code>，就会引起 <code>(E_ERROR) Trying to get property &#39;url&#39; of non-object</code> 错误。</p><h2 id="常规方法是使用-isset-加以判断："><a href="#常规方法是使用-isset-加以判断：" class="headerlink" title="常规方法是使用 isset 加以判断："></a>常规方法是使用 <code>isset</code> 加以判断：</h2><pre><code>if(isset($user-&gt;avatar-&gt;url))    return $user-&gt;avatar-&gt;url;else    return &#39;defaultUrl&#39;;</code></pre><p>如果在 <code>blade</code> 模板的 <code>echo</code> 中，可以使用：</p><pre><code>{{ $user->avatar->url or 'defaultUrl' }}</code></pre><p>上述代码会被 <code>Blade</code> 引擎解析为：</p><pre><code>echo e(isset($user-&gt;avatar-&gt;url) ? $user-&gt;avatar-&gt;url : &#39;defaultUrl&#39;);</code></pre><blockquote><p> <code>Laravel 5.7</code> 已经取消了这个特性。详见：<a href="https://github.com/laravel/framework/pull/23532" target="_blank" rel="noopener">https://github.com/laravel/framework/pull/23532</a> 。</p></blockquote><h2 id="PHP7-可以使用-NULL-合并操作符"><a href="#PHP7-可以使用-NULL-合并操作符" class="headerlink" title="PHP7 可以使用 ?? (NULL 合并操作符) :"></a><code>PHP7</code> 可以使用 <code>?? (NULL 合并操作符)</code> :</h2><pre><code>// 如果 $user-&gt;avatar-&gt;url 为 null, 返回 &#39;defaultUrl&#39;return $user-&gt;avatar-&gt;url ?? &#39;defaultUrl&#39;;</code></pre><h2 id="Laravel-5-5-及以上可以使用-optional-辅助函数："><a href="#Laravel-5-5-及以上可以使用-optional-辅助函数：" class="headerlink" title="Laravel 5.5 及以上可以使用 optional 辅助函数："></a><code>Laravel 5.5</code> 及以上可以使用 <code>optional</code> 辅助函数：</h2><pre><code>/** * 如果给定的对象是 null ， 那么属性和方法会简单地返回 null 而不是产生一个错误： */return optional($user-&gt;avatar)-&gt;url;</code></pre><p>详见 <a href="https://laravel-china.org/docs/laravel/5.7/helpers/1320#method-optional" target="_blank" rel="noopener">https://laravel-china.org/docs/laravel/5.7/helpers/1320#method-optional</a></p><p><code>Laravel 5.7</code> 中，<code>optional</code> 函数还可以接受 <code>匿名函数</code> 作为第二个参数：</p><pre><code>/** * 如果第一个参数不为 null, 则调用闭包 */return optional(User::find($id), function ($user) {    return new DummyUser;});</code></pre><p>详见 <a href="详见 https://laravel.com/docs/5.7/helpers#method-optional">https://laravel.com/docs/5.7/helpers#method-optional</a></p><h2 id="使用-object-get-辅助函数"><a href="#使用-object-get-辅助函数" class="headerlink" title="使用 object_get 辅助函数"></a>使用 <code>object_get</code> 辅助函数</h2><pre><code>return object_get($user-&gt;avatar, &#39;url&#39;, &#39;default&#39;);</code></pre><p>这个函数原意是用来以 <code>.</code> 语法来获取对象中的属性，例如：</p><pre><code>return object_get($user, &#39;avatar.url&#39;, &#39;default&#39;);</code></pre><p>也可以达到避免 <code>non-object</code> 错误的效果。</p><pre><code>if (! function_exists(&#39;object_get&#39;)) {    /**     * Get an item from an object using &quot;dot&quot; notation.     *     * @param  object  $object     * @param  string  $key     * @param  mixed   $default     * @return mixed     */    function object_get($object, $key, $default = null)    {        if (is_null($key) || trim($key) == &#39;&#39;) {            return $object;        }        foreach (explode(&#39;.&#39;, $key) as $segment) {            if (! is_object($object) || ! isset($object-&gt;{$segment})) {                return value($default);            }            $object = $object-&gt;{$segment};        }        return $object;    }}</code></pre><p>详见 <a href="https://github.com/laravel/framework/blob/master/src/Illuminate/Support/helpers.php#L673" target="_blank" rel="noopener">https://github.com/laravel/framework/blob/master/src/Illuminate/Support/helpers.php#L673</a></p><h2 id="使用-data-get-辅助函数"><a href="#使用-data-get-辅助函数" class="headerlink" title="使用 data_get 辅助函数"></a>使用 <code>data_get</code> 辅助函数</h2><pre><code>return data_get($user, &#39;avatar.url&#39;, &#39;default&#39;);</code></pre><p>或</p><pre><code>return data_get($user, [&#39;avatar&#39;, &#39;url&#39;], &#39;default&#39;);</code></pre><p>以 <code>.</code> 语法来获取对象属性或数组元素。</p><pre><code>if (! function_exists(&#39;data_get&#39;)) {    /**     * Get an item from an array or object using &quot;dot&quot; notation.     *     * @param  mixed   $target     * @param  string|array  $key     * @param  mixed   $default     * @return mixed     */    function data_get($target, $key, $default = null)    {        if (is_null($key)) {            return $target;        }        $key = is_array($key) ? $key : explode(&#39;.&#39;, $key);        while (! is_null($segment = array_shift($key))) {            if ($segment === &#39;*&#39;) {                if ($target instanceof Collection) {                    $target = $target-&gt;all();                } elseif (! is_array($target)) {                    return value($default);                }                $result = [];                foreach ($target as $item) {                    $result[] = data_get($item, $key);                }                return in_array(&#39;*&#39;, $key) ? Arr::collapse($result) : $result;            }            if (Arr::accessible($target) &amp;&amp; Arr::exists($target, $segment)) {                $target = $target[$segment];            } elseif (is_object($target) &amp;&amp; isset($target-&gt;{$segment})) {                $target = $target-&gt;{$segment};            } else {                return value($default);            }        }        return $target;    }}</code></pre><p>详见 <a href="https://github.com/laravel/framework/blob/master/src/Illuminate/Support/helpers.php#L450" target="_blank" rel="noopener">https://github.com/laravel/framework/blob/master/src/Illuminate/Support/helpers.php#L450</a></p>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我又掉 Laravel env 函数坑里了</title>
      <link href="/laravel/wo-you-diao-laravel-env-han-shu-keng-li-liao/"/>
      <url>/laravel/wo-you-diao-laravel-env-han-shu-keng-li-liao/</url>
      
        <content type="html"><![CDATA[<p>哈哈，最近踩坑比较多啊，不过这次真的怪自己不细心看文档了。<br>事情是这样的，今天发现项目在执行定时任务的时候报错了，faild_jobs 中塞了好多错误记录，一看内容全是 “JUHE_APPKEY_FOR_XXXX is null”，这是我的物流查询 Job 里抛出的异常，当用<code>env(&#39;JUHE_APPKEY_FOR_XXXX&#39;)</code> 读取 app_key 为空时就会抛出。但是 .env 里明明配置了就是没有。<br>其实之前出现过一回，但是由于没有固定重现也就没有重视这事儿，今天终于花时间去搞定了，花了半小时终于锁定了重现步骤：<code>config:cache</code> 后就肯定读不到了，<code>config:clear</code> 后就可以了，当然这里有一个前提，调用 env 函数的地方是在业务代码里，而非<code>config/*</code> 文件中。<br>然后我去翻了一下文档，发现其实在 Laravel 的 5.2 升级日志中有这么一段：</p><pre><code>If you are using the config:cache command during deployment, you must make sure that you are only calling the env function from within your configuration files, and not from anywhere else in your application.If you are calling env from within your application, it is strongly recommended you add proper configuration values to your configuration files and call env from that location instead, allowing you to convert your env calls to config calls.</code></pre><p>其实就是下面这段代码的意思，相信聪明的你一眼就看懂了：</p><p><img src="https://s2.ax1x.com/2019/02/27/kTKN36.png" alt></p><p>这是框架核心启动文件类 <code>Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables::boot</code> 方法，从 20 行我们可以发现，一旦缓存了配置以后，就不会再从 .env 文件加载内容了，所以你在业务代码中使用 env 函数时已经无法读取 .env 中设定的内容了，但是其它环境变量不影响哦。那为啥配置文件的可以呢？因为配置文件缓存的时候会加载 .env 然后读取值缓存配置内容。<br>那怎么办呢？上面的官方说明已经告诉我们了：在配置文件创建对应的配置项，比如我们第三方服务可以放到 config/services.php 中，在配置里使用 env 读取，然后把从 env 函数读取的地方改成<code>config(&#39;services.juhe.app_key&#39;)</code> 这样来避免这个问题。<br>其实作者这样做是有道理的，毕竟 .env 文件是文本内容，解析它的成本还是挺高的。所以请小心不要入这个坑哦。</p>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
